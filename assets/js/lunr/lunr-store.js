var store = [{
        "title": "5 Tips To Code Like A Pro",
        "excerpt":"Writing code for a web app or software is the most important part of Development Life Cycle. The coder needs to organize everything from the beginning – especially for enterprise level projects. If it’s not properly organized, the coding processes and code management afterwards may end up not just time consuming, but also a bit frustrating.   Well written code is maintainable, reusable, and testable. Following tips will help you to code like a pro:   1. Follow Coding Standards   It’s easy to unorganized code, but it’s hard to maintain such code. Good code typically follows some standard for naming conventions, formatting, etc. Such standards are nice because they make things deterministic to those who read your code afterwards, including yourself.   You can create your own coding standard, but it’s better to stick to one with wider-acceptance. Publicly maintained standards like Zend Framework Coding Standard or PSR-1 Coding Style Guide, it will be easier for others to adapt.   2. Write Useful Comments   Proper comments improve readability of the codes. This is a crucial part of standard coding and helps into maintenance of the code.   Write meaningful, single line comments for vague lines; write full parameter and functionality descriptions for functions and methods; for tricky logic blocks, describe the logic in words before it if necessary. And don’t forget, always keep your comments up to date!   3. Use Meaningful Variable Names   Never use names like $x, $y, and $test for your variables. How do expect to read such code in the future? Good code should be meaningful in terms of variable names, function/method names, and class names. Some good examples of meaningful names are: $request, $dbResult, and $tempFile (depending on your coding style guidelines these may use underscores, camelCase, or PascalCase).   4. Refactor Code   Refactoring keeps your code healthy. You should be refactoring everything, from your architecture to your methods and functions, variables names, the number of arguments a method receives, etc. There is no standard rule for it but practising following rules makes code better and organized.   If your function or method is more than 20-25 lines, it’s more likely that you are including too much logic inside it, and you can probably split it into two or more smaller functions/methods. If your method/function name is more than 20 characters, you should either rethink the name, or rethink the whole function/method by reviewing the first rule.   If you have a lot of nested loops then you may be doing some resource-intensive processing without realizing it. In general, you should rethink the logic if you are nesting more than 2 loops. Three nested loops is just horrible! Consider if there are any applicable design patterns your code can follow. You shouldn’t use patterns just for the sake of using patterns, but patterns offer tried-and-true ready-thought solutions that could be applicable.   5. Use Meaningful Structures   Structuring your application is very important. Keep it simple and don’t use complex structure. When naming directories and files, use a naming convention you agree upon with your team, or use one associated with your coding standard. Always split the four parts of any typical PHP application apart from each other – CSS, HTML Templates/Layouts, JavaScript, PHP Code – and for each try to split libraries from business logic. It’s also a good idea to keep your directory hierarchy as shallow as possible so it’s easier to navigate and find the code you’re looking for.  ","categories": ["Coding","Coding Tips"],
        "tags": ["better coding","coding","coding tips","tips"],
        "url": "/2021/12/08/5-tips-to-code-like-a-pro/",
        "teaser": null
      },{
        "title": "Why PHP Is Best For Web Development",
        "excerpt":"While working on any website of web application, the first question that comes in mind is which programming language is best. If you ask programmers, they might love or hate PHP as server side scripting language. Well the opinions may vary but there are several reasons which make PHP one of the best programming language for web development. Here are 5 best reasons to love PHP (Hypertext Preprocessor):   Less Expensive   It requires no licensing fee and it has less expensive hosting servers available. Its software are mostly free and open source which makes it less expensive.   Faster   Web apps which are developed on PHP are comparatively faster as it uses its own memory space to run.   Database Flexibility   Well, one of the best reasons to love PHP is its flexibility towards databases. It can connect to several databases the most commonly used is the MySQL. MySQL can be used for free.   Very Good Documentation   PHP also has very good online documentation with a good framework of functions in place. This makes the language relatively easy to learn and very well supported online. There are countless forums and tutorials on various PHP methods and problems so it is usually very easy to find help if you need it.   Frameworks and Content Management System   There are numerous frameworks and CMS (Content Management System) available in PHP such as CakePHP, YII, Laravel, WordPress, Magento. All of these come with very well explained developer documentation which adds a plus to it.  ","categories": ["Coding","Coding Tips"],
        "tags": ["backend","backend development","coding tips","php","programming","web development","why choose php"],
        "url": "/2021/12/08/why-php-is-best-for-web-development/",
        "teaser": null
      },{
        "title": "Magento 2.x Installation Guide",
        "excerpt":"Magento is one of the most powerful eCommerce based CMS available in market. Well, maintaining its awesomeness, the Magento officials has released Magento 2.x (e.g. 2.0, 2.0.1, 2.4.3 etc.). The beginners may face some issue while installing Magento2. So, here is the prefect guide to help them out.   The latest stable version of Magento is 2.4.x (as of the day, the article is published), so the installation process would be shown for the same version. This would work in the previous versions of Magento as well.   Before you begin, you need to setup a host with Magento system requirements. as mentioned in the following section.   System Requirements                  Web Server       Apache 2.x / nginx 1.8 (or the latest mainline version)                       Elasticsearch       Version 7.x                 Composer       Version 2.x                 PHP       Version 7.4                 MySQL       Version 8.x           The above ones are the essential system requirements of Magento 2.4.x, but you might need some other software too. To know more, click here.   One You are done with the host setup, you would need to go perform two tasks in order to Install Magento 2.4.x:      Getting the metapackage   Installation   Getting the Metapackage   There are multiple ways to create a Magento 2 project. You can find more details here. We will look into the 2 easiest methods .i.e.      Using Composer   Using FTP   Now let’s see these methods one by one.   1. Using Composer      Log into your host as file system owner   Change the directory to to the docroot of the virtual host of your configured server (e.g. /var/www/html)   Now, you need to create a composer project using the Magento Open Source or Adobe Commerce metapackage.   Magento Open Source   composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition &lt;install-directory-name&gt;   With Specific Version   composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition=2.4.1 &lt;install-directory-name&gt;   Adobe Commerce   composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition &lt;install-directory-name&gt;   With Specific Version   composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.4.1 &lt;install-directory-name&gt;   When prompted, enter your Magento authentication keys. Public and private keys are created and configured in your Commerce Marketplace.   2. Using FTP      To install Magento2 via FTP, download the compressed setup file from https://magento.com/tech-resources/download   Upload the file to apache server’s root directory or any desired directory inside it.   Installation   1. Set file/folder permissions   cd &lt;magento install directory&gt; find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + chown -R :www-data . chmod u+x bin/magento  2. For Magento version 2.4.x, command line is to be used to install. You need to run following command to Install it:   bin/magento setup:install \\ --base-url=http://mystore.com \\ --db-host=localhost \\ --db-name=magento \\ --db-user=magento \\ --db-password=magento \\ --admin-firstname=admin \\ --admin-lastname=admin \\ --admin-email=admin@admin.com \\ --admin-user=admin \\ --admin-password=admin123 \\ --language=en_US \\ --currency=USD \\ --timezone=America/Chicago \\ --use-rewrites=1  Here, you will need to change the values for these options, base-url, db-host, db-name, db-user and db-password. You can change the values for other options as well as per your requirement. Its highly recommended to use a strong admin-password. Wait till the installation is completed.   Note: You may customize the Admin URI using the –backend-frontname option. But, its recommended to skip this option and allow the installation command to automatically generate a random URI. A random URI is harder for hackers or malicious software to exploit. The URI displays in your console when installation is complete.   If you are a developer, then you need to do some more changes. To know about these stuffs, click here.  ","categories": ["Coding","Magento","Magento 2","Magento 2 Installation and Troubleshooting","Tutorial"],
        "tags": ["backend","backend development","guide","installation","magento","php","programming","troubleshooting","web development"],
        "url": "/2021/12/09/magento-2-installation-guide/",
        "teaser": null
      },{
        "title": "Magento 2.x Troubleshooting Guide",
        "excerpt":"The developers make every effort to ensure their Magento extensions are stable, reliable, and well-tested. However, due to the highly-customizable nature of Magento they cannot anticipate every possible configuration and so incompatibilities may arise. This guide gives an overview of the most common issues are found on client’s sites and how to resolve them.   The purpose of this document is to help the magento2 users in solving the commonly faced issues while installation and usage of Magento 2.x Extensions.   The most common methods of troubleshooting are as follows:      Refreshing the Cache   Reindexing the Magento   Solving 404 error on System Configuration   Permission issues on new extension   Disable Maintenance Mode if your Extension is not installed successfully   Disable the newly installed Extension if your Magento store stops working or throws fatal error   View list of extensions and Disable/Enable installed extensions   Fixing Permission error after running php bin magento/bin setup:upgrade command   Setting Deploy mode: Developer to see exact errors   Solving error while deploying sample data   Fixing errors while static-content deploy   Refreshing the Cache   After installing the extension on Magento, if the installed Extension is not visible or is not working properly then you can try Refreshing the Cache from Magento Admin. You can do it via ssh/terminal (CLI) or can do it from admin panel.   1. Via SSH/Terminal (CLI)   Run this command into CLI:   php bin/magento cache:clean  If it doesn’t solves the problem, run:   php bin/magento cache:flush  Note: You might need to set correct permission to the var/ pub/ and generated/ directories after completion of the above commands.   2. Via Admin Panel   To refresh the cache from admin panel, follow these steps:      Log into Magento Store Admin Panel   Navigate to System ⇒ Cache Management. Now select all the cache types in the list, choosing the refresh option in the drop down menu , and finally clicking Submit.   &lt;figcaption class=\"wp-element-caption\"&gt;   Refreshing cache from Admin Panel   Reindexing the Magento   You can also try Reindexing the Magento, if you are having problem with your newly Installed Extension. It can be done by running this command in CLI:   php bin/magento indexer:reindex  Make sure that all indexers are reindexed and the output of the command looks like:   Category Products index has been rebuilt successfully in &lt;time&gt; Product Categories index has been rebuilt successfully in &lt;time&gt; Product Price index has been rebuilt successfully in &lt;time&gt; Product EAV index has been rebuilt successfully in &lt;time&gt; Stock index has been rebuilt successfully in &lt;time&gt; Catalog Rule Product index has been rebuilt successfully in &lt;time&gt; Catalog Product Rule index has been rebuilt successfully in &lt;time&gt; Catalog Search index has been rebuilt successfully in &lt;time&gt;  Source: Magento DevDocs   Solving 404 error on Store Configuration   After installing your Extension, if you got 404 error on Store ⇒ Configuration, then it may be the problem of Magento Session/Registry, you can solve this issue just by Logging Out of Magento admin and Logging In again.   Permission issues on new extension   Sometimes the installation will fail because Magento doesn’t have sufficient permissions to write to the necessary web server directories. There are multiple ways to fix this.      Easiest way but not secure: Just give the 777 permission to your Extension folders and try uploading again.   Linux Permissions: Your apache user:group in linux and the folder permissions of your magento should match. e.g if your cPanel/ftp username/ssh user is “mjoy”. You need to check which group this user belongs to. Suppose “mjoy” user belongs to group “company”. In this case add “www-data” or “apache” group to “company” group as well. This is a bit complex to solve and require good knowledge of linux permission system.   Disable Maintenance Mode if your Extension is not installed successfully   The solution of this problem is simple. You may choose any of the below methods:   1. Using CLI   You need to run following command to disable maintenance mode:   php bin/magento maintenance:disable  Similarly, if you need to enable the maintenance mode, you may run:   php bin/magento maintenance:enable  2. Using FTP/File System   Access FTP into your remote website directory where your Magento files reside.   Find &amp; delete the file named var/.maintenance.flag.   Your site should now work normally.   Disable the newly installed Extension (module/plugin) if your Magento store stops working or throws fatal error   If you are getting any fatal error and getting any exception after you have installed new extension. Just disable the new extension. You can do that by running a command from terminal:   php bin/magento module:disable ExtensionVendor_ModuleName  After doing this clear the cache and try to load your store again.   You can use this command to get the list of all extensions:   php bin/magento module:status  View list of extensions and Disable/Enable installed extensions   Some time after installing extension our extension does not appear in our store so to solve this issue we have to check few things that is given below:   1. Check list of extension installed in your store you can do that by following command in your terminal   php bin/magento module:status  2. You will get list of all extension check your extension is there or not if not then you have to type another command to enable you extension:   php bin/magento module:enable ExtensionVendor_ModuleName  After doing this you will get to see your extension on your store.   Fixing Permission error after running “php bin magento/bin setup:upgrade” or “php bin magento/bin setup:di:compile” command   Once you have run upgrade command then if you will not give permission then you will get few errors.   In order to resolve it you have to run few commands that will give proper permission commands are as:   find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + chown -R :www-data . # Ubuntu  You might need to run these commands too:   sudo chmod -R 777 var/ sudo chmod -R 777 pub/ sudo chmod -R 777 generated/  After completion of the above steps, permission issue will be resolved.   Setting Deploy mode:developer to see exact errors   Magento comes with 3 different modes out of the box (developer, default and production). In order to check exact error you have to switch to developer mode for that write following command:   php bin/magento deploy:mode:set developer  Now it will be set to developer mode and you can check the exact error.   Note: To know more about the deploy modes, click here.   Solving error while deploying sample data   Some time when we are deploying sample data we get error in that case we can resolve the issue by the following command:   composer config repositories.0 composer https://repo.magento.com  Your issue will be resolved.   Fixing errors while static-content deploy   We get error like this check Installation File Permissions when we do static-content-deploy. To debug this, follow these steps:   Open setup/src/Magento/Setup/Model/FilePermissions.php   Goto line 143 in method checkRecursiveDirectories()   Add the lines var_dump($subDirectory); var_dump($subDirectory-&gt;isWritable());   Re-run:   php bin/magento setup:upgrade  Now you’ll see what is really wrong, and you can fix it.  ","categories": ["Coding","Magento","Magento 2","Magento 2 Installation and Troubleshooting","Tutorial"],
        "tags": ["backend development","coding","coding tips","debugging","magento","php","programming","troubleshooting","web development"],
        "url": "/2021/12/09/magento-2-troubleshooting-guide/",
        "teaser": null
      },{
        "title": "Delete All Products at Once In Magento",
        "excerpt":"Well, usually during development, you may need to add some test products (Sample Data) which needs to be removed before moving the site to production. If the volume is large, then it would be very difficult to delete it from the Product Grid. In this case, you may need some trick. Well, you can use the following method:      Log into MySQL server via CLI or phpMyAdmin/Adminer   Run the following SQL Queries and it will do the job:   SET FOREIGN_KEY_CHECKS = 0;  TRUNCATE TABLE `cataloginventory_stock_item`; TRUNCATE TABLE `cataloginventory_stock_status`; TRUNCATE TABLE `cataloginventory_stock_status_idx`; TRUNCATE TABLE `cataloginventory_stock_status_tmp`; TRUNCATE TABLE `catalog_category_product`; TRUNCATE TABLE `catalog_category_product_index`; TRUNCATE TABLE `catalog_category_product_index_tmp`; TRUNCATE TABLE `catalog_compare_item`; TRUNCATE TABLE `catalog_product_bundle_option`; TRUNCATE TABLE `catalog_product_bundle_option_value`; TRUNCATE TABLE `catalog_product_bundle_price_index`; TRUNCATE TABLE `catalog_product_bundle_selection`; TRUNCATE TABLE `catalog_product_bundle_selection_price`; TRUNCATE TABLE `catalog_product_bundle_stock_index`; TRUNCATE TABLE `catalog_product_entity`; TRUNCATE TABLE `catalog_product_entity_datetime`; TRUNCATE TABLE `catalog_product_entity_decimal`; TRUNCATE TABLE `catalog_product_entity_gallery`; TRUNCATE TABLE `catalog_product_entity_int`; TRUNCATE TABLE `catalog_product_entity_media_gallery`; TRUNCATE TABLE `catalog_product_entity_media_gallery_value`; TRUNCATE TABLE `catalog_product_entity_media_gallery_value_to_entity`; TRUNCATE TABLE `catalog_product_entity_media_gallery_value_video`; TRUNCATE TABLE `catalog_product_entity_text`; TRUNCATE TABLE `catalog_product_entity_tier_price`; TRUNCATE TABLE `catalog_product_entity_varchar`; TRUNCATE TABLE `catalog_product_index_eav`; TRUNCATE TABLE `catalog_product_index_eav_decimal`; TRUNCATE TABLE `catalog_product_index_eav_decimal_idx`; TRUNCATE TABLE `catalog_product_index_eav_decimal_tmp`; TRUNCATE TABLE `catalog_product_index_eav_idx`; TRUNCATE TABLE `catalog_product_index_eav_tmp`; TRUNCATE TABLE `catalog_product_index_price`; TRUNCATE TABLE `catalog_product_index_price_bundle_idx`; TRUNCATE TABLE `catalog_product_index_price_bundle_opt_idx`; TRUNCATE TABLE `catalog_product_index_price_bundle_opt_tmp`; TRUNCATE TABLE `catalog_product_index_price_bundle_sel_idx`; TRUNCATE TABLE `catalog_product_index_price_bundle_sel_tmp`; TRUNCATE TABLE `catalog_product_index_price_bundle_tmp`; TRUNCATE TABLE `catalog_product_index_price_cfg_opt_agr_idx`; TRUNCATE TABLE `catalog_product_index_price_cfg_opt_agr_tmp`; TRUNCATE TABLE `catalog_product_index_price_cfg_opt_idx`; TRUNCATE TABLE `catalog_product_index_price_cfg_opt_tmp`; TRUNCATE TABLE `catalog_product_index_price_downlod_idx`; TRUNCATE TABLE `catalog_product_index_price_downlod_tmp`; TRUNCATE TABLE `catalog_product_index_price_final_idx`; TRUNCATE TABLE `catalog_product_index_price_final_tmp`; TRUNCATE TABLE `catalog_product_index_price_idx`; TRUNCATE TABLE `catalog_product_index_price_opt_agr_idx`; TRUNCATE TABLE `catalog_product_index_price_opt_agr_tmp`; TRUNCATE TABLE `catalog_product_index_price_opt_idx`; TRUNCATE TABLE `catalog_product_index_price_opt_tmp`; TRUNCATE TABLE `catalog_product_index_price_tmp`; TRUNCATE TABLE `catalog_product_index_tier_price`; TRUNCATE TABLE `catalog_product_index_website`; TRUNCATE TABLE `catalog_product_link`; TRUNCATE TABLE `catalog_product_link_attribute_decimal`; TRUNCATE TABLE `catalog_product_link_attribute_int`; TRUNCATE TABLE `catalog_product_link_attribute_varchar`; TRUNCATE TABLE `catalog_product_option`; TRUNCATE TABLE `catalog_product_option_price`; TRUNCATE TABLE `catalog_product_option_title`; TRUNCATE TABLE `catalog_product_option_type_price`; TRUNCATE TABLE `catalog_product_option_type_title`; TRUNCATE TABLE `catalog_product_option_type_value`; TRUNCATE TABLE `catalog_product_relation`; TRUNCATE TABLE `catalog_product_super_attribute`; TRUNCATE TABLE `catalog_product_super_attribute_label`; TRUNCATE TABLE `catalog_product_super_link`; TRUNCATE TABLE `catalog_product_website`; TRUNCATE TABLE `catalog_url_rewrite_product_category`; TRUNCATE TABLE `downloadable_link`; TRUNCATE TABLE `downloadable_link_price`; TRUNCATE TABLE `downloadable_link_purchased`; TRUNCATE TABLE `downloadable_link_purchased_item`; TRUNCATE TABLE `downloadable_link_title`; TRUNCATE TABLE `downloadable_sample`; TRUNCATE TABLE `downloadable_sample_title`; TRUNCATE TABLE `product_alert_price`; TRUNCATE TABLE `product_alert_stock`; TRUNCATE TABLE `report_compared_product_index`; TRUNCATE TABLE `report_viewed_product_aggregated_daily`; TRUNCATE TABLE `report_viewed_product_aggregated_monthly`; TRUNCATE TABLE `report_viewed_product_aggregated_yearly`; TRUNCATE TABLE `report_viewed_product_index`;  SET FOREIGN_KEY_CHECKS = 1;  To debug other issue which may arise during development or production, refer this guide.   If you need any more help, feel free to contact me.  ","categories": ["Coding","Magento","Magento 2","Magento 2 - Tips and Quickies","Tutorial"],
        "tags": ["backend development","coding tips","ecommerce","magento","programming","tips","troubleshooting","web development"],
        "url": "/2021/12/09/delete-all-products-at-once-in-magento/",
        "teaser": null
      },{
        "title": "How to Delete Orders in Magento 2?",
        "excerpt":"Well, usually during development, you might need to place few orders to test our overall system which needs to be removed before moving the site to production. Natively, Magento doesn’t allows us to delete orders. In this case, you may need some trick. Well, you can use the following method:   1. Using MySQL Queries      Log into MySQL server via CLI or phpMyAdmin/Adminer   Run the following SQL Queries and it will do the job:   SET FOREIGN_KEY_CHECKS=0;  # Clean order history TRUNCATE TABLE `sales_bestsellers_aggregated_daily`; TRUNCATE TABLE `sales_bestsellers_aggregated_monthly`; TRUNCATE TABLE `sales_bestsellers_aggregated_yearly`;  # Clean order infos TRUNCATE TABLE `sales_creditmemo`; TRUNCATE TABLE `sales_creditmemo_comment`; TRUNCATE TABLE `sales_creditmemo_grid`; TRUNCATE TABLE `sales_creditmemo_item`; TRUNCATE TABLE `sales_invoice`; TRUNCATE TABLE `sales_invoiced_aggregated`; TRUNCATE TABLE `sales_invoiced_aggregated_order`; TRUNCATE TABLE `sales_invoice_comment`; TRUNCATE TABLE `sales_invoice_grid`; TRUNCATE TABLE `sales_invoice_item`; TRUNCATE TABLE `sales_order`; TRUNCATE TABLE `sales_order_address`; TRUNCATE TABLE `sales_order_aggregated_created`; TRUNCATE TABLE `sales_order_aggregated_updated`; TRUNCATE TABLE `sales_order_grid`; TRUNCATE TABLE `sales_order_item`; TRUNCATE TABLE `sales_order_payment`; TRUNCATE TABLE `sales_order_status_history`; TRUNCATE TABLE `sales_order_tax`; TRUNCATE TABLE `sales_order_tax_item`; TRUNCATE TABLE `sales_payment_transaction`; TRUNCATE TABLE `sales_refunded_aggregated`; TRUNCATE TABLE `sales_refunded_aggregated_order`; TRUNCATE TABLE `sales_shipment`; TRUNCATE TABLE `sales_shipment_comment`; TRUNCATE TABLE `sales_shipment_grid`; TRUNCATE TABLE `sales_shipment_item`; TRUNCATE TABLE `sales_shipment_track`; TRUNCATE TABLE `sales_shipping_aggregated`; TRUNCATE TABLE `sales_shipping_aggregated_order`;  # Clean cart infos TRUNCATE TABLE `quote`; TRUNCATE TABLE `quote_address`; TRUNCATE TABLE `quote_address_item`; TRUNCATE TABLE `quote_id_mask`; TRUNCATE TABLE `quote_item`; TRUNCATE TABLE `quote_item_option`; TRUNCATE TABLE `quote_payment`; TRUNCATE TABLE `quote_shipping_rate`;  # Reset indexes (if you want your orders number start back to 1 TRUNCATE TABLE sequence_invoice_1; TRUNCATE TABLE sequence_order_1; TRUNCATE TABLE sequence_shipment_1; TRUNCATE TABLE sequence_creditmemo_1; # if you are using more than one stores, you should also truncate sequence_invoice_2...x, sequence_order_2...x tables and so on.  SET FOREIGN_KEY_CHECKS=1;  Note: This will reset and remove all your orders, orders history and bestseller data etc. So, run this if you have a backup of the data first or you find the existing data of no use.   Important: Please do not truncate these tables:      sales_order_status   sales_sequence_meta   sales_sequence_profile   sales_order_status_label   sales_order_status_state   2. Using Magento 2.x Extension   Well, using MySQL might not be ideal for all of the situations. What if you need to delete any particular order(s). Also, using MySQL requires prior technical knowledge of it and might be complex for some.   In this case, It’s recommended to use https://github.com/manishjoy/magento2-delete-orders   It’s an free extension and can be operated from Admin panel itself.   To debug other issue which may arise during development or production, refer this guide.   If you need any more help, feel free to contact me.  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies","Tutorial"],
        "tags": ["backend","backend development","coding tips","magento","programming","tips","troubleshooting"],
        "url": "/2021/12/10/how-to-delete-orders-in-magento-2/",
        "teaser": null
      },{
        "title": "Get Amazon Prime Membership at Just ₹499/year (Limited Time Offer). Here&#8217;s How",
        "excerpt":"Amazon Prime is one of the most popular subscription service available in India with literally tons of benefits. It let’s you watch latest &amp; exclusive movies &amp; TV shows. Apart from this, the membership offers free shipping benefits, early access to sales and exclusive deals. As India being a very value conscious market, Amazon had offered prime membership at just ₹999/- in 2016. This price helped it become one of the leading paid subscription program in India.   After a long period of time, Amazon India has decided to increase the subscription price. From December 14, 2021, It will cost you ₹1499 per year. If you are planning to get the subscription, It’s would be a wise decision to get it before the price hike.   But Amazon has something more to offer you.   Get Amazon Prime Membership at ₹499/- Only      If you are an Indian user aged between 18 years to 24 years, Amazon India has offered a new promotional offer for you. You can get the membership at 50% discount i.e. ₹499/year.   If you’re 18-24 years old, then you’re in for a treat!  Get Amazon Prime Membership at just ₹499/year! But hurry up, the price is valid till 13th December only.  Join Prime Now - https://t.co/vmAWmhnoCK#PrimeLimitedTimeOffer pic.twitter.com/0DSLvBXY7Y &mdash; Amazon India (@amazonIN) December 3, 2021   Do you will have to first purchase an Amazon Prime membership by paying the full amount, which is ₹999. Once it’s purchased, a cashback of ₹500 will be credited within 48 hours to the your Amazon Pay balance account. The offer is valid till 13th December,2021 only.   Here is how you can avail this offer:      Open https://amazon.in/youthoffer in your smartphone   Click on the Banner image or click on “Continue to avail Youth Offer” link   Tap on the Login to join prime button   Sign in with your Amazon credentials   Pay ₹999 using any payment method (credit/debit card, net banking, UPI, wallet etc.)   Verify your age by uploading an ID Proof like Aadhaar and a selfie   That’s it. You will get the cashback of ₹500 within 48 hours  ","categories": ["Tech News"],
        "tags": ["amazon","amazon offers","daily news","discount","offer","online sale","sale","saving tips","tech update","tech-news","tips"],
        "url": "/2021/12/11/get-amazon-prime-membership-at-just-499-year-2021/",
        "teaser": null
      },{
        "title": "Netflix took &#8220;150 Rupiya Dega&#8221; meme too seriously",
        "excerpt":"Netflix is one of the leading OTT platforms across the world. They have a very successful business across the globe, but they have struggled in a budget and value centric market like India. While its competitors, like Amazon Prime Video used to offer subscription at ₹999/year (which now costs ₹1499/year from 14th December 2021) which calculates into less than ₹85/month, Netflix plans seemed to be very costly.   Finally, Netflix have listened to the users and have granted everyone’s Christmas wish. Now their plans are cheaper than ever. Users have been expressing their happiness across the social media platforms by sharing tweets, messages, memes etc. One of the most popular meme is “150 Rupiya Dega” from the movie Phir Hera Pheri, as the plans start from ₹149/Month ( ₹1788/year).      Here are the details of the revised plan of Netflix India:      So, what are you waiting for, gift yourself a Netflix Subscription.   Reference: Netflix India  ","categories": ["Tech News"],
        "tags": ["entertainment","netflix","plan","prime video","subscription","tech news"],
        "url": "/2021/12/14/netflix-has-reduced-subscription-rates-for-all-plans-in-india-now-starting-at-149/",
        "teaser": null
      },{
        "title": "How to extend Parent Styles (CSS) in Child Theme using Less - Magento 2",
        "excerpt":"Extending Parent Styles in Custom Theme using _extend.less   When we create a custom theme based upon a parent theme (e.g. Magento_luma, Magento_blank etc.), the properties of parent theme gets inherited to it automatically. But, in most of the cases, we need to change the styles as per our requirements. In this blog, we will learn the process to achieve it.   To extend the parent theme’s styles in your theme, follow these steps:      Create a _extend.less file there. The path to it looks like following:   &lt;theme_dir&gt;/ │ ├── web/ │ │ ├── css/ │ │ │ ├── source/ │ │ │ ├──_extend.less     Add your LESS code in this file.   Extending a theme using _extend.less is the simplest option when you are happy with everything the parent theme has, but want to add more styles.   Extending Parent Styles in Custom Theme using _theme.less   To override parent styles (that is, override default Magento UI library variables), follow these steps:   1. In your theme directory, create a web/css/source sub-directory.   2. Create a _theme.less file here. The path to it then looks like following:   &lt;theme_dir&gt;/ │ ├── web/ │ │ ├── css/ │ │ │ ├── source/ │ │ │ ├──_theme.less ...  3. It is important to remember that your _theme.less override the parent _theme.less.   4. Copy all variables you need from the parent _theme.less, including those which will not be changed. For example, if your theme inherits from Blank, the _theme.less you should copy from is located at   &lt;Magento_Blank_theme_dir&gt;/web/css/source/_theme.less  5. Make the necessary changes.   It might be possible that the parent theme doesn’t have _theme.less file. It’s just for a reference. If there is a file with name _module.less in /Magento_Theme/web/css/source then you need to copy the same file in your theme at similar location /Magento_Theme/web/css/source and then make required changes into this file.   The drawback of this approach is that you need to monitor and manually update your files whenever the parent’s _theme.less is updated.   Note: To see the changes that you had made in the less file, you need to perform setup:upgrade and setup:static-content:deploy.   Less Compilation with Grunt   Prerequisites:   Make sure that you set your Magento application to the developer or default mode.   Installing and configuring Grunt:   Magento has built-in Grunt tasks configured, but there are still several prerequisite steps you need to take to be able to use it:   1. Install node.js to any location on your machine. Refer: https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions   2. Install Grunt CLI tool globally. To do this, run the following command in a command prompt:   npm install -g grunt-cli  3. Now Rename the following files in Magento root directory:   Gruntfile.js.sample to Gruntfile.js  package.json.sample to package.json   4. Install (or refresh) the node.js project dependency, including Grunt, for your Magento instance. To do this, run the following commands in a command prompt:   cd &lt;your_Magento_root_directory&gt; npm install npm update  5. Add your theme to Grunt configuration. To do this, in the dev/tools/grunt/configs/themes.js file, add your theme to module.exports like following:   module.exports = {     ...     &lt;theme&gt;: {     area: 'frontend',     name: '&lt;Vendor&gt;/&lt;theme&gt;',     locale: '&lt;language&gt;',     files: [         '&lt;path_to_file1&gt;', //path to root source file         '&lt;path_to_file2&gt;'     ],     dsl: 'less'     ... },  Here, the following notation is used:   &lt;theme&gt;: your theme code, conventionally should correspond to the theme directory name.   &lt;language&gt;: specified in the ‘code_subtag’ format, for example en_US. Only one locale can be specified here. To debug the theme with another locale, create one more theme declaration, having specified another value for language   &lt;path_to_file&gt;: path to the root source file, relative to the app/design/frontend/&lt;Vendor&gt;/&lt;theme/&gt;web directory. You need to specify all root source files of the theme. If your theme inherits from a certain theme, and does not contain its own root source files, specify the root source files of the parent theme.   6. (Optional) If you want to use Grunt for “watching” changes automatically, without reloading pages in a browser each time, install the LiveReload extension in your browser.   Grunt Commands                  Command       Usage                       grunt clean:&lt;theme&gt;. For example:grunt clean:blank       It removes the theme related static files in the pub/static and var directories.                 grunt exec:&lt;theme&gt;       It republishes symlinks to the source files to the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory.                 grunt less:&lt;theme&gt;       Compiles .css files using the symlinks published in the pub/static/frontend/&lt;Vendor&gt;/&lt;theme&gt;/&lt;locale&gt; directory                 grunt watch       Tracks the changes in the source files, recompiles .css files, and reloads the page in the browser pages (you need to have LiveReload installed for you browser)           Basically, you need to use grunt less:&lt;theme&gt; which would compile less.  ","categories": ["Magento","Magento 2","Magento 2 Theme Development Series","Tutorial"],
        "tags": ["frontend development","magento","magento developer","magento2","php","programming","theme development","tutorial","web development"],
        "url": "/2021/12/20/how-to-extend-parent-styles-css-in-child-theme-using-less-magento-2/",
        "teaser": null
      },{
        "title": "How to Write Log in Magento 2",
        "excerpt":"Debugging can be a nightmare if developers Magento didn’t had the feature of logging. Logs help to spot an error and the reason for it. In this blog we will learn about it and the process to use it. Let’s get started.   Introduction   Magento uses Monolog library by default. Monolog is a popular PHP logging solution with a wide range of handlers that enable you to build advanced logging strategies. It is implemented as a preference for Psr\\Log\\LoggerInterface in Magento application using di.xml.   Main Magento 2 log class is Magento\\Framework\\Logger\\Monolog and is defined in MAGENTO2_ROOT/app/etc/di.xml   &lt;preference for=\"Psr\\Log\\LoggerInterface\" type=\"Magento\\Framework\\Logger\\Monolog\"/&gt;  Logs in Magento 2 consist of system information records for the analysis in the future. One of the most common examples of such events is the error log.   Usage   We have two methods to write log in Magento 2:   1. Using \\Psr\\Log\\LoggerInterface class   To start working with a logger, you must create an instance of \\Psr\\Log\\LoggerInterface. With this interface, you can call the following functions to write data to log files:      alert()   critical()   debug()   emergency()   error()   info()   log()   notice()   warning()   Example:   class SomeClass  {      private $logger;       public function __construct(\\Psr\\Log\\LoggerInterface $logger)      {          $this-&gt;logger = $logger;      }       public function doSomething()      {          try {              //do something          } catch (\\Exception $e) {              $this-&gt;logger-&gt;debug('msg to print'); // printed in var\\log\\debug.log     \t     $this-&gt;logger-&gt;info('msg to print');  // printed in var\\log\\system.log          }      }  }  You may log JSON, Arrays etc too just like we did with string in above example.   2. Using \\Zend\\Log\\Writer\\Stream class (Logging into Custom File)   In the first method, we can write log into system.log and debug.log, but there are multiple logs being written into same files from Magento core files etc. In some cases, we might need to write log into custom files. It’s very simple, here is a sample code:   $writer = new \\Zend\\Log\\Writer\\Stream(BP . '/var/log/test.log'); $logger = new \\Zend\\Log\\Logger(); $logger-&gt;addWriter($writer); $logger-&gt;info('Your text message');  The above code might not work with the Magento version &gt; 2.3.x. You may use this instead:   $writer = new \\Zend_Log_Writer_Stream(BP . '/var/log/test.log'); $logger = new \\Zend_Log(); $logger-&gt;addWriter($writer); $logger-&gt;info(\"Your text message\");  In this case, the message would be logged into var/log/test.log   I hope this blog would help you in the development process and debugging. If you need any more help, feel free to contact me.  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies","Tutorial"],
        "tags": ["backend development","coding","coding tips","magento","php","programming","troubleshooting","web development"],
        "url": "/2022/01/02/how-to-write-log-in-magento-2/",
        "teaser": null
      },{
        "title": "Understanding Context Object and Using Defined Methods from it in Magento 2",
        "excerpt":"Understanding Context Object   As a Magento developer, you must have seen, in most of the Constructors of Magento 2 classes, a $context object is passed. For example:   public function __construct(     \\Magento\\Framework\\App\\Action\\Context $context,     \\Magento\\Catalog\\Model\\Design $catalogDesign,     \\Magento\\Catalog\\Model\\Session $catalogSession, ....     parent::__construct(         $context,         $layoutFactory,  To understand it, you should read it as “ActionContext”. It represents the application context in which the action is executed. In simpler words, it gives you access to all objects with application state that a controller action needs, for example the registry or the request object.   The context classes don’t have own functionality, they are just a container for other objects. You can see them as shortcut to not have number of parameters in each controller action. All common parameters are merged in the context object.   Using Defined Methods from Context Object   As we have learned so far, context classes work as a container for other objects, so by using $context object we can access those objects and their associated attributes (methods etc.)   Let’s understand it from an example. If you need to use an object of \\Magento\\Store\\Model\\StoreManagerInterface class in your block, by most common practice of DI, you will inject the class in constructor like this:   public function __construct(     \\Magento\\Backend\\Block\\Template\\Context $context,     \\Magento\\Store\\Model\\StoreManagerInterface $storeManager,     array $data = [] ) {     $this-&gt;_storeManager = $storeManager;     parent::__construct($context, $data); }  This code might work, but still it’s not correct to inject this class as the object of class \\Magento\\Backend\\Block\\Template\\Context already contains it.   In above case, you will get “Incorrect dependency in class” error while running bin/magento setup:di:compile   This error occurs when we use some class’s object in constructor which is already present in $context object. The correct practice is to use methods directly from the context object rather than injecting it’s class into the constructor like this:   public function __construct(     \\Magento\\Backend\\Block\\Template\\Context $context,     array $data = [] ) {     $this-&gt;_storeManager = $context-&gt;getStoreManager();     parent::__construct($context, $data); }  Now, let’s see the list of methods in $context object for different classes:   Block Class   $context-&gt;getRequest(); // return \\Magento\\Framework\\App\\RequestInterface $context-&gt;getUrlBuilder(); // return \\Magento\\Framework\\UrlInterface $context-&gt;getScopeConfig(); // return \\Magento\\Framework\\App\\Config\\ScopeConfigInterface $context-&gt;getLogger(); // return \\Psr\\Log\\LoggerInterface $context-&gt;getEventManager(); // return \\Magento\\Framework\\Event\\ManagerInterface $context-&gt;getStoreManager(); // return \\Magento\\Store\\Model\\StoreManagerInterface $context-&gt;getPageConfig(); // return \\Magento\\Framework\\View\\Page\\Config $context-&gt;getFilesystem(); // return \\Magento\\Framework\\Filesystem $context-&gt;getViewFileSystem(); // return \\Magento\\Framework\\View\\FileSystem $context-&gt;getAppState(); // return \\Magento\\Framework\\App\\State $context-&gt;getCache(); // return \\Magento\\Framework\\App\\CacheInterface $context-&gt;getSession(); // return \\Magento\\Framework\\Session\\SessionManagerInterface $context-&gt;getInlineTranslation(); // return \\Magento\\Framework\\Translate\\Inline\\StateInterface $context-&gt;getEscaper(); // return \\Magento\\Framework\\Escaper $context-&gt;getLocaleDate(); // return \\Magento\\Framework\\Stdlib\\DateTime\\TimezoneInterface $context-&gt;getDesignPackage(); // return \\Magento\\Framework\\View\\DesignInterface $context-&gt;getLayout(); // return \\Magento\\Framework\\View\\LayoutInterface $context-&gt;getSidResolver(); // return \\Magento\\Framework\\Session\\SidResolverInterface $context-&gt;getAssetRepository(); // return \\Magento\\Framework\\View\\Asset\\Repository $context-&gt;getViewConfig(); // return \\Magento\\Framework\\View\\ConfigInterface $context-&gt;getCacheState(); // return \\Magento\\Framework\\App\\Cache\\StateInterface $context-&gt;getFilterManager(); // return \\Magento\\Framework\\Filter\\FilterManager  Model Class   $context-&gt;getLogger(); // return \\Psr\\Log\\LoggerInterface $context-&gt;getCacheManager(); // return \\Magento\\Framework\\App\\CacheInterface $context-&gt;getEventDispatcher(); // return \\Magento\\Framework\\Event\\ManagerInterface $context-&gt;getAppState(); // return \\Magento\\Framework\\App\\State $context-&gt;getLogger(); // return \\Psr\\Log\\LoggerInterface  Helper Class   $context-&gt;getRequest(); // return \\Magento\\Framework\\App\\RequestInterface $context-&gt;getUrlBuilder(); // return \\Magento\\Framework\\UrlInterface $context-&gt;getScopeConfig(); // return \\Magento\\Framework\\App\\Config\\ScopeConfigInterface $context-&gt;getLogger(); // return \\Psr\\Log\\LoggerInterface $context-&gt;getEventManager(); // return \\Magento\\Framework\\Event\\ManagerInterface $context-&gt;getModuleManager(); // return \\Magento\\Framework\\Module\\Manager $context-&gt;getCacheConfig(); // return \\Magento\\Framework\\Cache\\ConfigInterface $context-&gt;getHttpHeader(); // return \\Magento\\Framework\\HTTP\\Header $context-&gt;getRemoteAddress(); // return \\Magento\\Framework\\HTTP\\PhpEnvironment\\RemoteAddress $context-&gt;getUrlEncoder(); // return \\Magento\\Framework\\Url\\EncoderInterface $context-&gt;getUrlDecoder(); // return \\Magento\\Framework\\Url\\DecoderInterface  Controller Class   $context-&gt;getActionFlag(); // return \\Magento\\Framework\\App\\ActionFlag $context-&gt;getEventManager(); // return \\Magento\\Framework\\Event\\ManagerInterface $context-&gt;getObjectManager(); // return \\Magento\\Framework\\ObjectManagerInterface $context-&gt;getRedirect(); // return \\Magento\\Framework\\App\\Response\\RedirectInterface $context-&gt;getRequest(); // return \\Magento\\Framework\\App\\RequestInterface $context-&gt;getResponse(); // return \\Magento\\Framework\\App\\ResponseInterface $context-&gt;getUrl(); // return \\Magento\\Framework\\UrlInterface $context-&gt;getMessageManager(); // return \\Magento\\Framework\\Message\\ManagerInterface $context-&gt;getResultRedirectFactory(); // return \\Magento\\Framework\\Controller\\Result\\RedirectFactory $context-&gt;getResultFactory(); // return \\Magento\\Framework\\Controller\\ResultFactory  If you need any more help, feel free to contact me. Happy Coding 🙂  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies","Tutorial"],
        "tags": ["backend development","coding","coding tips","magento","programming","tips"],
        "url": "/2022/01/23/understanding-context-object-and-using-defined-methods-from-it-in-magento-2/",
        "teaser": null
      },{
        "title": "How to Get Base URL, Media URL, Current URL, Base Path, Media Path &#8211; Magento 2.x",
        "excerpt":"In this blog, both methods are demonstrated, using Dependency Injection and using ObjectManager.   Using Dependency Injection   Here is the sample code. It has been used in a block class but you may use it in any class you want. We will be using three classes:   \\Magento\\Store\\Model\\StoreManagerInterface  \\Magento\\Framework\\Filesystem\\DirectoryList and   \\Magento\\Framework\\UrlInterface as follows:   &lt;?php  namespace Vendor\\Module\\Block;  class DataBlock extends \\Magento\\Framework\\View\\Element\\Template {      protected $_storeManager;      protected $_urlInterface;      protected $_dir;       public function __construct(         \\Magento\\Backend\\Block\\Template\\Context $context,          \\Magento\\Store\\Model\\StoreManagerInterface $storeManager,          \\Magento\\Framework\\Filesystem\\DirectoryList $dir,          \\Magento\\Framework\\UrlInterface $urlInterface,          array $data = []      ) {          $this-&gt;_storeManager = $storeManager;          $this-&gt;_dir = $dir;          $this-&gt;_urlInterface = $urlInterface;          parent::__construct($context, $data);      }      /**       * This function prints all of the required data using:       * \\Magento\\Store\\Model\\StoreManagerInterface      */      public function getStoreManagerData() {           echo $this-&gt;_storeManager-&gt;getStore()-&gt;getId() . '&lt;br /&gt;';          /**#@+ Standard Function Call:          $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl(Url type);         /*Possible URL types const URL_TYPE_LINK = 'link';          const URL_TYPE_DIRECT_LINK = 'direct_link';          const URL_TYPE_WEB = 'web'; const URL_TYPE_MEDIA = 'media';          const URL_TYPE_STATIC = 'static';          const URL_TYPE_JS = 'js';          */          // by default: URL_TYPE_LINK is returned           echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl() . '&lt;br /&gt;';          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_WEB) . '&lt;br /&gt;'; echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_DIRECT_LINK) . '&lt;br /&gt;';          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_MEDIA) . '&lt;br /&gt;'; echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_STATIC) . '&lt;br /&gt;';          /* To get custom URL based on url key */          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getUrl('url_key') . '&lt;br /&gt;';          /* To get Current URL */          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getCurrentUrl(false) . '&lt;br /&gt;';          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseMediaDir() . '&lt;br /&gt;';          echo $this-&gt;_storeManager-&gt;getStore()-&gt;getBaseStaticDir() . '&lt;br /&gt;';      }      /**      * This function prints all of the required data using:      * \\Magento\\Framework\\UrlInterface      */      public function getUrlInterfaceData() {          echo $this-&gt;_urlInterface-&gt;getCurrentUrl() . '&lt;br /&gt;';          echo $this-&gt;_urlInterface-&gt;getUrl() . '&lt;br /&gt;';          /* To get custom URL based on url key */          echo $this-&gt;_urlInterface-&gt;getUrl('url_key') . '&lt;br /&gt;';          echo $this-&gt;_urlInterface-&gt;getBaseUrl() . '&lt;br /&gt;';      }           /**       * This function prints all of the directory paths using:       * \\Magento\\Framework\\Filesystem\\DirectoryList      */      public function getDirectoryPaths() {          echo $this-&gt;_dir-&gt;getRoot().\"&lt;br&gt;\"; // Output: /var/www/html/myproject          echo $this-&gt;_dir-&gt;getPath('media').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/pub/media          echo $this-&gt;_dir-&gt;getPath('pub').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/pub          echo $this-&gt;_dir-&gt;getPath('static').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/pub/static          echo $this-&gt;_dir-&gt;getPath('var').\"&lt;br&amp;&gt;\"; // Output: /var/www/html/myproject/var          echo $this-&gt;_dir-&gt;getPath('app').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/app          echo $this-&gt;_dir-&gt;getPath('etc').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/app/etc          echo $this-&gt;_dir-&gt;getPath('lib_internal').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/lib/internal         echo $this-&gt;_dir-&gt;getPath('lib_web').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/lib/web          echo $this-&gt;_dir-&gt;getPath('tmp').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/tmp          echo $this-&gt;_dir-&gt;getPath('cache').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/cache          echo $this-&gt;_dir-&gt;getPath('log').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/log          echo $this-&gt;_dir-&gt;getPath('session').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/session          echo $this-&gt;_dir-&gt;getPath('setup').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/setup/src          echo $this-&gt;_dir-&gt;getPath('di').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/di          echo $this-&gt;_dir-&gt;getPath('upload').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/pub/media/upload         echo $this-&gt;_dir-&gt;getPath('generation').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/generation          echo $this-&gt;_dir-&gt;getPath('view_preprocessed').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/view_preprocessed          echo $this-&gt;_dir-&gt;getPath('composer_home').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/composer_home          echo $this-&gt;_dir-&gt;getPath('html').\"&lt;br&gt;\"; // Output: /var/www/html/myproject/var/view_preprocessed/html      }  }  You can see more functions in the following classes:  \\Magento\\Store\\Model\\Store  \\Magento\\Framework\\UrlInterface   Using ObjectManager   Well, this approach is never recommended as you know that using ObjectManager is never recommended in Magento 2. Find more about this here.   Though, we will see some of the methods to get work done:   &lt;?php     $objectManager = \\Magento\\Framework\\App\\ObjectManager::getInstance();      $appState = $objectManager-&gt;get('\\Magento\\Framework\\App\\State');      $appState-&gt;setAreaCode('frontend');      $storeManager = $objectManager-&gt;get('\\Magento\\Store\\Model\\StoreManagerInterface');      $store = $storeManager-&gt;getStore();      echo $store-&gt;getUrl('product/33');      echo '&lt;br&gt;';      echo $store-&gt;getCurrentUrl();      echo '&lt;br&gt;';      echo $store-&gt;getBaseUrl();      echo '&lt;br&gt;';      echo $store-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_WEB);      echo '&lt;br&gt;';      echo $store-&gt;getBaseUrl(\\Magento\\Framework\\UrlInterface::URL_TYPE_MEDIA);      echo '&lt;br&gt;';  ?&gt;  If you need any more help, feel free to contact me. Happy Coding 🙂  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies"],
        "tags": ["backend","backend development","coding","coding tips","magento","magento2","media-url","php","programming","tips"],
        "url": "/2022/02/13/how-to-get-base-url-media-url-current-url-base-path-media-path-magento-2-x/",
        "teaser": null
      },{
        "title": "7 Useful HTML Attributes That Every Web Developer Must Know",
        "excerpt":"As you already know about HTML is the building block of a web page. HTML attributes allow you to perform more several complex operations on the web page itself. And, being a web developer, you must already knew about it.   In this blog, we are going to discuss some very useful HTML attributes which should be known to every web developer. So, let’s get started.   1. inputmode   &lt;input type=\"text\" inputmode=\"email\"&gt; &lt;input type=\"text\" inputmode=\"url\"&gt; &lt;input type=\"text\" inputmode=\"numeric\"&gt; &lt;input type=\"text\" inputmode=\"tel\"&gt;  It hints at the type of data that might be entered by the user while editing the element or its content. This allows a browser to display an appropriate virtual keyboard. E.g. for numeric inputmode, browser will display the number pad as the virtual keyboard like this:      2. pattern   &lt;input type=\"text\" name=\"username\" pattern=\"[A-Za-z0-9]+\"&gt;  It specifies a regular expression that the value is checked against on form submission. For example, the above pattern allows only capital and small letters along with full numbers and no special character. When a character which was not allowed is input, it would show error like this:      3. multiple   &lt;input type=\"file\" multiple&gt;  This attribute allows the user to select multiple values (files, emails etc.)   4. contenteditable   &lt;div contenteditable=\"true\"&gt;     This text can be edited by the end user. &lt;/div&gt;  This attribute allows the user to edit the content of the element like this:      5. defer   &lt;script src=\"script.js\" defer&gt;&lt;/script&gt;  This attribute ensures the script is executed when the page has finished parsing.   6. translate   &lt;section&gt;     &lt;p translate=\"no\"&gt;This text won't be translated&lt;/p&gt;     &lt;p translate=\"yes\"&gt;This text can be translated&lt;/p&gt; &lt;/section&gt;  It specifies whether the element should be translated when the page is localized.   7. loading   &lt;img src=\"image.jpg\" loading=\"lazy\"&gt;  This attribute specifies whether a browser should load an image immediately or to defer loading of off-screen mages until, for example, the user scrolls near them.   I hope this blog would help you in the web development process. If you need any more help, feel free to contact me.  ","categories": ["Coding","Coding Tips"],
        "tags": ["coding tips","html","programming","tips","web development"],
        "url": "/2022/04/03/7-useful-html-attributes-that-every-web-developer-must-know/",
        "teaser": null
      },{
        "title": "How To Override Magento 2.X Theme For A Specific Route?",
        "excerpt":"In this blog, we will see how to override the Magento 2.x theme applied to the store, but only for some specific route(s). It can help to fix faulty layout issues etc. caused due to some third party module which is not compatible with the applied theme.   This can be done by listening to the layout_load_before event and setting the desired theme in the observer, like this:   events.xml   &lt;?xml version=\"1.0\" ?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Event/etc/events.xsd\"&gt; \t&lt;event name=\"layout_load_before\"&gt;         &lt;observer name=\"set_theme_for_customroute\" instance=\"ManishJoy\\CustomTheme\\Observer\\SetThemeForMyroute\"/&gt;     &lt;/event&gt; &lt;/config&gt;  Observer (SetThemeForMyroute.php)   &lt;?php /**  * Copyright ©  All rights reserved.  * See COPYING.txt for license details.  */ declare(strict_types=1);  namespace ManishJoy\\CustomTheme\\Observer;  use Magento\\Framework\\App\\Request\\Http; use Magento\\Framework\\Event\\Observer; use Magento\\Framework\\Event\\ObserverInterface; use Magento\\Framework\\View\\DesignInterface;  class SetThemeForMyroute implements ObserverInterface {     /** @var Http */     private $request;      /** @var DesignInterface  */     private $design;      /**      * @param Http $request      * @param DesignInterface $design      */     public function __construct(         Http $request,         DesignInterface $design     ) {         $this-&gt;request = $request;         $this-&gt;design = $design;     }      /**      * @param Observer $observer      */     public function execute(Observer $observer): void     {         $actionInfo = $this-&gt;request-&gt;getFullActionName();          if ($actionInfo == 'catalog_product_view') {             $this-&gt;design-&gt;setDesignTheme('Magento/blank'); /* You need to pass the desired theme name as a param to the setDesignTheme() method like Smartwave/porto, Magento/luma etc. */         }     } }  I hope this blog would help you in the Magento development process. If you need any more help, feel free to contact me.  ","categories": ["Coding","Magento","Magento 2","Magento 2 - Tips and Quickies"],
        "tags": ["backend development","coding tips","magento","php","programming","theme","web development"],
        "url": "/2022/04/04/how-to-override-magento-2-x-theme-for-a-specific-route/",
        "teaser": null
      },{
        "title": "Why Your Screen Time Should Be Limited?",
        "excerpt":"First, excessive screen time can negatively impact physical health. Sitting in front of a screen for long periods of time can lead to eye strain, headaches, and back pain. It can also lead to a sedentary lifestyle, which can increase the risk of obesity and other health problems.   Second, excessive screen time can negatively impact mental health. Constant exposure to social media, news, and other digital content can lead to feelings of anxiety, depression, and FOMO (fear of missing out). It can also disrupt sleep patterns, which can lead to fatigue, irritability, and difficulty concentrating.   Third, excessive screen time can negatively impact social interactions and relationships. Spending too much time on devices can lead to neglecting face-to-face interactions and can cause isolation, which can be detrimental to our overall well-being.   In conclusion, limiting screen time can help individuals improve their physical and mental health, as well as their relationships with others. It can also help individuals to create more balance in their lives by allocating time for activities such as exercise, hobbies, and spending time with friends and family.   What Screen Time is Too Much?   There is no universally agreed upon definition of “too much” screen time, as it can vary depending on the individual and their specific circumstances. However, the American Academy of Pediatrics (AAP) recommends the following guidelines for children and adolescents:      Infants and toddlers (birth to 18 months): Avoid screen time except for video-chatting with family and friends.   Children 18-24 months: Watch high-quality programming with parents, who can help them understand what they’re watching.   Children 2-5 years: Limit screen time to one hour a day of high-quality programming.   Children 6 years and older: Place consistent limits on the time spent using media, and the types of media, and make sure media does not take the place of adequate sleep, physical activity and other behaviors essential to health.   For adults, the World Health Organization (WHO) recommends limiting sedentary behavior, including screen time, to less than two hours per day for adults and children aged five years and older.   It’s also important to consider the quality of the content consumed, as well as the timing and context of the screen time. For example, watching educational content or video chatting with friends and family may have different effects than watching mind-numbing content or spending hours on social media.   Ultimately, it’s important to be mindful of your own screen time habits and to make adjustments as necessary to promote a healthy balance in your life.   How to Limit Your Screen Time?   There are many apps available that can help you manage your screen time by tracking your usage, setting limits, and providing reminders. Some apps also have features that allow you to block distracting apps during certain times of the day.      Set time limits: Use the built-in screen time feature on your device such as Screen Time (iOS) and Digital Wellbeing (Android) to set time limits for specific apps or activities. You can also use third-party apps to track and limit your screen time.   Keep your phone out of reach: Keep your phone out of reach or in another room when you are not using it, this will make it less tempting to constantly check it.   Use apps in grayscale: Some apps have a feature that allows you to change the color settings to grayscale, which can make the apps less appealing to use.   Get an accountability partner: Find someone who is also looking to limit their screen time and hold each other accountable.   Make a list of what you want to achieve before using your device and stick to it: This will help you focus on the task you need to complete rather than mindlessly scrolling on your device.   Find a balance: The idea is not to eliminate screen time entirely but to find a balance that works for you, and that allows you to enjoy the benefits of technology while also taking care of your physical and mental well-being.   Remember, limiting your screen time may take some time to adjust, but it’s worth it for the benefits it brings to your overall well-being. Start by setting small and achievable goals and gradually increase them as you get used to it.  ","categories": ["Life &amp; Career"],
        "tags": ["digital wellbeing","health","screen time","technology"],
        "url": "/2023/01/16/why-your-screen-time-should-be-limited/",
        "teaser": null
      },{
        "title": "How to Use Digital Wellbeing in Your Android Phone to Limit Screen Time?",
        "excerpt":"In today’s digital age, it’s easy to get lost in the endless scroll of social media, the constant notifications from messaging apps, and the allure of playing just one more round of your favorite mobile game. However, too much time spent on our phones and other devices can have a negative impact on our mental and physical well-being. That’s why setting up digital wellbeing to limit apps is an important step in managing our relationship with technology.   Why Set up Digital Wellbeing?   Excessive use of technology can lead to a host of negative effects on our health and well-being, including:      Insomnia: Constant exposure to the blue light emitted by screens can disrupt our circadian rhythms and make it harder to fall asleep at night.   Poor posture: Hunching over our devices for extended periods of time can lead to neck and back pain, headaches, and other physical problems.   Social isolation: Spending too much time on our devices can lead to feelings of loneliness and disconnection from our loved ones and the world around us.   Increased stress: Constantly checking for notifications and responding to messages can create a constant sense of urgency and stress.   By setting up digital wellbeing to limit apps, we can take control of our technology use and reduce the negative impacts it can have on our lives.   How to Set Up Digital Wellbeing?   Setting up digital wellbeing on an Android device is easy and can be done through the built-in “Digital Wellbeing” feature. Here are the steps to set it up:      Open the “Settings” app on your Android device and scroll down to the “Digital Wellbeing &amp; parental controls” option.         Tap on the “Digital Wellbeing” option and then tap on “Get started” to begin the setup process.   The Digital Wellbeing feature will show you an overview of your daily app usage, including how much time you spend on each app and how many times you’ve unlocked your device.   To set app limits, tap on the “App Timer” option and select the apps you want to limit. Set a daily time limit for each app, and once you’ve reached your limit, the app will be blocked for the rest of the day.       To turn off notifications, tap on the “Do Not Disturb” option and configure the settings to suit your needs. You can choose to silence notifications during specific times of the day, or you can turn them off altogether.       To take breaks, tap on the “Wind Down” option and set a bedtime for yourself. Once you reach your bedtime, your device will automatically switch to grayscale, and the “Do Not Disturb” feature will be turned on.   To see your progress and set goals for yourself, tap on the “Dashboard” option. Here you can see your daily and weekly app usage, set goals for yourself, and see how well you are doing in relation to your goals.       Note that, some of the features may be different based on the device and android version.   By following these steps, you can easily set up digital wellbeing on your Android device and take control of your technology use. Remember that it’s important to use technology in a way that enhances our lives, rather than detracts from them.  ","categories": ["Life &amp; Career"],
        "tags": [],
        "url": "/2023/01/22/how-to-use-digital-wellbeing-in-your-android-phone-to-limit-screen-time/",
        "teaser": null
      },{
        "title": "ChatGPT Userbase Crosses 100 Million Mark in Just 2 Months: A Breakthrough in AI Chatbots Technology",
        "excerpt":"OpenAI’s ChatGPT has achieved a major milestone, reaching 100 million users in just two months. This impressive feat is a testament to the popularity and widespread use of this cutting-edge technology.   Introduction   ChatGPT is an AI-powered chatbot platform that has been making waves in the tech industry. It has recently reached a milestone of 100 million users in just two months, making it one of the fastest-growing chatbot platforms in the world. This impressive growth is a testament to the quality and reliability of ChatGPT’s technology. In this blog, we’ll explore what makes ChatGPT stand out from its competitors and why so many people are turning to this platform for their chatbot needs.   What is ChatGPT?   ChatGPT is a conversational AI platform that uses advanced machine learning algorithms to understand and respond to human language. It’s an open-source platform that allows developers to create custom chatbots for various applications, from customer service to entertainment. ChatGPT is powered by OpenAI’s GPT-3 language model, which has been trained on a massive amount of data and can generate human-like responses to a wide range of topics.   Why ChatGPT is Unique?   What sets ChatGPT apart from other chatbot platforms is its ability to understand and respond to natural language input. It can handle complex questions and provide accurate and relevant responses in real-time. This makes ChatGPT ideal for customer service and support, as well as other applications where a quick and accurate response is critical.   Another key feature of ChatGPT is its ability to generate human-like responses. This is thanks to its use of GPT-3, which has been trained on a massive amount of data and can generate responses that are indistinguishable from those of a human. This makes ChatGPT an ideal platform for creating chatbots that can engage with users in a natural and conversational manner.   Know More     The Growth of ChatGPT   The rapid growth of ChatGPT can be attributed to its high-quality technology and user-friendly platform. Its ease of use and versatility have made it a popular choice among developers, and its popularity has only increased as more people discover the benefits of AI-powered chatbots.   In just two months, ChatGPT has reached 100 million users, making it one of the fastest-growing chatbot platforms in the world. This impressive growth is a testament to the quality and reliability of ChatGPT’s technology, and it’s only the beginning of what promises to be a bright future for this innovative platform.   Conclusion   ChatGPT’s rapid growth and impressive technology make it a standout player in the chatbot industry. Its ability to understand and respond to natural language, as well as its human-like responses, make it an ideal platform for creating chatbots for various applications. With its user-friendly platform and growing popularity, ChatGPT is poised for even greater success in the future.  ","categories": ["Tech News"],
        "tags": ["AI","artificial intelligence","chatbot","chatgpt","tech news"],
        "url": "/2023/02/05/chatgpt-userbase-crosses-100-million-mark-in-just-2-months-a-breakthrough-in-ai-chatbots-technology/",
        "teaser": null
      },{
        "title": "Step-by-Step Guide: How to Install WSL and Ubuntu on Windows for Hassle-Free Linux Integration",
        "excerpt":"In recent years, there has been a significant increase in the number of developers using Windows as their primary operating system. However, many developers still prefer Linux-based systems due to their flexibility and open-source nature. Fortunately, Windows 10 and Windows 11 have a feature called Windows Subsystem for Linux (WSL) that allows you to run a Linux environment, such as Ubuntu, directly on your Windows machine without having to switch to a separate machine or virtual machine.   In this guide, we will walk you through the steps on how to install WSL and Ubuntu on Windows system.   Step 1: Enable WSL   Before installing Ubuntu, you need to enable the Windows Subsystem for Linux feature. To do this, follow these steps:      Open the Start menu and search for “Turn Windows features on or off”       Scroll down to find “Windows Subsystem for Linux” and check the box next to it   Also, find “Virtual Machine Platform” and check the box next to it       Click OK and restart your computer when prompted   Step 2: Install Ubuntu   Now that you have enabled the WSL feature, you can install Ubuntu from the Microsoft Store by following these steps:      Open the Microsoft Store app   Search for “Ubuntu” in the search bar and select “Ubuntu 20.04 LTS” (or the latest version available)       Click on the “Get” button and wait for the download and installation to finish   Step 3: Launch Ubuntu   Once Ubuntu is installed, you can launch it by following these steps:      Open the Start menu and search for “Ubuntu 20.04 LTS” (or the version you installed)   Click on the Ubuntu app to launch it   The first time you launch Ubuntu, it will take some time to set up the environment. Follow the on-screen instructions to complete the setup process.   Step 4: Using Ubuntu on Windows   Now that Ubuntu is installed and set up on your Windows computer, you can start using it. Here are a few things you might want to do:      Install packages: Use the “sudo apt-get install” command to install packages just like you would on a regular Ubuntu machine.   Run commands: You can run any Ubuntu command from the Ubuntu command line just like you would on a regular Ubuntu machine.   Access files: You can access your Windows files from within Ubuntu by navigating to the “/mnt/c/” directory.   Launch GUI apps: You can also launch graphical user interface (GUI) apps from within Ubuntu by installing an X server on Windows and setting the DISPLAY environment variable.   That’s it! You now have Ubuntu running on your Windows 10 machine. You can use the terminal to run Linux commands and install Linux software just like you would on a Linux machine.   Conclusion   Installing WSL and Ubuntu on Windows 10 is a straightforward process that can be completed in a few easy steps. With this setup, you can enjoy the best of both worlds – the flexibility of Linux and the familiarity of Windows. If you’re a developer who needs to work with both Linux and Windows environments, WSL is an excellent solution that can save you time and make your workflow more efficient.  ","categories": ["Coding","Coding Tips","Tutorial"],
        "tags": ["backend development","coding tips","linux","programming","tips","ubuntu","web development","windows","wsl"],
        "url": "/2023/05/02/how-to-install-wsl-and-ubuntu-on-windows/",
        "teaser": null
      },{
        "title": "How to Install LEMP (Linux, Nginx, MySQL, PHP) on Ubuntu for High-Performance Websites?",
        "excerpt":"Are you looking to set up a robust web server that can handle high-traffic websites with lightning-fast performance? Look no further! In this tutorial, we’ll guide you through the process of installing LEMP (Linux, Nginx, MySQL, PHP) stack on Ubuntu. LEMP is a powerful combination of open-source software that ensures exceptional performance, stability, and security for your website. Let’s dive into the step-by-step installation process.   Step 1: Preparing Your Ubuntu Server   Before installing the LEMP stack, make sure your Ubuntu server is up-to-date by running the following commands:   sudo apt update sudo apt upgrade  Step 2: Installing Nginx   Nginx is a high-performance web server that will serve as the backbone of your LEMP stack. Execute the following commands to install Nginx:   sudo apt install nginx  After the installation is complete, start the Nginx service:   sudo systemctl start nginx  –or–   sudo service nginx start  Allow nginx in firewall using these commands:   sudo ufw allow 'Nginx HTTP' sudo ufw enable  To verify that Nginx is running, open your web browser and enter your server’s IP address (e.g. http://127.0.0.1/). If everything is set up correctly, you should see the default Nginx welcome page.   Step 3: Installing MySQL   MySQL is a widely used relational database management system. Let’s install MySQL using the following command:   sudo apt install mysql-server  During the installation process, you’ll be prompted to set a password for the MySQL root user. Make sure to choose a strong and secure password. Once the installation is complete, start the MySQL service:   sudo systemctl start mysql  To enhance the security of your MySQL installation, run the MySQL secure installation script:   sudo mysql_secure_installation  Follow the prompts to remove the anonymous user, disallow remote root login, remove test databases, and reload the privilege tables.   Note:   If you are not prompted to set password in the above method, you can use these steps to set password for your user (e.g. root):   sudo mysql  You will be logged into MySQL server, now run this query to set the password:   ALTER USER 'username'@'localhost' IDENTIFIED WITH mysql_native_password by 'password';  Verify your MySQL installation and password with this command, you will be asked to enter your password afterwards.   mysql -h 127.0.0.1 -u root -p  Step 4: Installing PHP   PHP is a popular server-side scripting language that enables dynamic content generation. Install PHP and its required dependencies using the following commands:   sudo apt-get install software-properties-common sudo add-apt-repository ppa:ondrej/php sudo apt update sudo apt install php php-fpm  If you need to install any specific version of PHP, you can use this command instead:   sudo apt install php8.1 php8.1-fpm  If you need to install additional PHP extensions for your framework, like Magento, you can install them like this:   sudo apt install php8.1 php8.1-fpm php8.1-common php8.1-mysql php8.1-gmp php8.1-curl php8.1-intl php8.1-mbstring php8.1-xmlrpc php8.1-gd php8.1-xml php8.1-cli php8.1-zip php8.1-soap php8.1-bcmath  Once installation is done, you can start it like this:   sudo systemctl start php8.1-fpm  Step 5: Configuring Nginx to Use PHP   To configure Nginx to work with PHP, open the default Nginx configuration file using your preferred text editor:   sudo nano /etc/nginx/sites-available/default  Inside the server block, locate the location ~ \\.php$ line and uncomment it by removing the ‘#’ character. It should look like this:   location ~ \\.php$ {     include snippets/fastcgi-php.conf;     fastcgi_pass unix:/var/run/php/php8.1-fpm.sock; }  Save the file and exit the text editor.   Step 6: Testing the LEMP Setup and Verifying PHP Configuration   To ensure that Nginx can handle PHP files properly, create a new PHP test file:   sudo nano /var/www/html/info.php  Add the following code to the file:   &lt;?php phpinfo(); ?&gt;  Save the file and exit the text editor. Open your web browser and navigate to http://your_server_ip/info.php. You should see the PHP information page, which confirms that PHP is working correctly with Nginx.   Step 7: Restarting Services   After making configuration changes, you may restart the Nginx, MySQL and PHP-FPM services:   sudo systemctl restart nginx sudo systemctl restart mysql-server sudo systemctl restart php8.1-fpm  Conclusion   Congratulations! You’ve successfully installed the LEMP stack on your Ubuntu server. By combining Linux, Nginx, MySQL, and PHP, you have set up a powerful web server that can handle high-performance websites with ease. Take your time to explore the various configuration options for each component, and enjoy the benefits of a robust LEMP stack for your website.   Remember, maintaining the security of your server and keeping your software up-to-date are essential practices for a safe and efficient web hosting environment. Happy coding!  ","categories": ["Coding","Coding Tips"],
        "tags": ["backend development","coding","hosting","mysql","programming","server","troubleshooting"],
        "url": "/2023/05/20/how-to-install-lemp-on-ubuntu-for-high-performance-websites/",
        "teaser": null
      },{
        "title": "How to Install Composer: Simplify Your PHP Development",
        "excerpt":"Composer is a powerful dependency management tool for PHP that has revolutionized the way developers handle libraries and packages in their projects. By automating package installation and ensuring version compatibility, Composer streamlines the development process and enhances code reusability. In this blog post, we will walk you through the step-by-step process of installing Composer on your system, enabling you to take full advantage of its capabilities.   Why Install Composer?   Before diving into the installation process, it’s essential to understand the benefits of using Composer in your PHP projects. By utilizing Composer, you can:      Manage Dependencies: Composer allows you to specify and manage the libraries and packages your project relies on, making it easier to incorporate external code into your application.   Version Control: Composer ensures that your project uses compatible versions of libraries, reducing conflicts and compatibility issues between different packages.   Autoloading: Composer provides an autoloader that automatically loads classes and files, eliminating the need for manual inclusion and allowing you to focus on coding rather than worrying about file dependencies.   Now, let’s proceed to the installation process.   Step 1: Check System Requirements   Before installing Composer, ensure that your system meets the following requirements:      PHP (version 5.3.2 or higher)   OpenSSL extension enabled   JSON extension enabled   Step 2: Download the Composer Installer   To get started, download the Composer installer script. Open your terminal or command prompt and enter the following command:   php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"  This command downloads the latest version of the Composer installer script, composer-setup.php.   Step 3: Verify the Installer   To ensure the integrity of the installer, it’s recommended to verify its authenticity using hashes. Run the following command in your terminal:   php -r \"if (hash_file('SHA384', 'composer-setup.php') === 'HASH_VALUE') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"  Replace 'HASH_VALUE' with the actual hash value from the Composer website (https://composer.github.io/pubkeys.html). This step guarantees that you have downloaded the official installer without any modifications.   Step 4: Run the Installer   To install Composer globally on your system, run the following command:   php composer-setup.php --install-dir=/usr/local/bin --filename=composer  This command installs Composer in the /usr/local/bin directory and creates an executable file named composer.   Step 5: Verify the Installation   Once the installation is complete, verify Composer by running the following command:   composer --version  If Composer is installed correctly, you will see the version number displayed in your terminal.   Congratulations! You have successfully installed Composer on your system. Now you can leverage the power of Composer to manage your PHP dependencies effortlessly.   Conclusion:   Composer is an indispensable tool for PHP developers, simplifying the process of managing dependencies and enhancing code reusability. By following the step-by-step installation guide provided in this blog post, you can quickly get Composer up and running on your system. With Composer in your development toolkit, you can streamline your PHP projects and take advantage of the vast array of packages available in the PHP ecosystem. Happy coding!  ","categories": ["Coding","Coding Tips"],
        "tags": ["backend development","coding","composer","php","programming"],
        "url": "/2023/05/20/how-to-install-composer-simplify-your-php-development/",
        "teaser": null
      },{
        "title": "How to Install Elasticsearch in Ubuntu for Enhanced Search Capabilities",
        "excerpt":"Elasticsearch is a powerful open-source search and analytics engine that offers efficient searching, indexing, and data analysis. By installing Elasticsearch on your Ubuntu system, you can enhance search functionalities and improve data management. In this tutorial, we’ll walk you through the step-by-step process of installing Elasticsearch in Ubuntu, ensuring a smooth and optimized installation.   Step 1: Update Your Ubuntu System   Update your Ubuntu system to ensure you have the most recent packages and security updates before continuing with the installation. Then, enter the following commands into the terminal:   sudo apt update sudo apt upgrade  Step 2: Install Java Development Kit (JDK)   Elasticsearch requires Java Development Kit (JDK) to run. Let’s install JDK using the following commands:   sudo apt install default-jdk  After the installation is complete, verify the Java installation by running:   java -version  Step 3: Download and Install Elasticsearch   To install Elasticsearch, you will need to download the Debian package provided by Elasticsearch. Execute the following commands to import the Elasticsearch GPG key and add the Elasticsearch repository:   wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add - sudo apt-get install apt-transport-https echo \"deb https://artifacts.elastic.co/packages/7.x/apt stable main\" | sudo tee /etc/apt/sources.list.d/elastic-7.x.list  Update the package lists and install Elasticsearch:   sudo apt update sudo apt install elasticsearch  Step 4: Configure Elasticsearch   Elasticsearch configuration files are located in the /etc/elasticsearch directory. Open the main configuration file using a text editor:   sudo nano /etc/elasticsearch/elasticsearch.yml  Inside the configuration file, you can modify various settings according to your requirements. For example, you can adjust the amount of memory Elasticsearch uses by modifying the Xms and Xmx values. It is recommended to allocate no more than half of your system’s memory to Elasticsearch.   Once you have made the necessary changes, save the file and exit the text editor.   Step 5: Start and Enable Elasticsearch   To start Elasticsearch, execute the following command:   sudo systemctl start elasticsearch  To ensure that Elasticsearch starts automatically on system boot, enable the service:   sudo systemctl enable elasticsearch  Step 6: Verify Elasticsearch Installation   To verify the installation and check the status of Elasticsearch, run the following command:   sudo systemctl status elasticsearch  If Elasticsearch is running correctly, you should see a message indicating its status as “active (running).”   Step 7: Test Elasticsearch Functionality   To test Elasticsearch, you can use the curl command-line tool to interact with the Elasticsearch REST API. Run the following command:   curl -X GET \"localhost:9200/\"  If everything is set up correctly, you will receive a response containing information about your Elasticsearch cluster, such as the version number and cluster name like this:      Conclusion   Congratulations! You have successfully installed Elasticsearch on your Ubuntu system, unlocking its powerful search capabilities. By following this step-by-step guide, you have learned how to set up Elasticsearch, configure its settings, and verify its functionality. With Elasticsearch up and running, you can now integrate it into your applications or use it to enhance search functionality within your system.   Reference: elastic.co  ","categories": ["Coding","Coding Tips","Magento 2 Installation and Troubleshooting"],
        "tags": ["backend","backend development","coding","ecommerce","elasticsearch","magento","php","programming","search"],
        "url": "/2023/05/20/how-to-install-elasticsearch-in-ubuntu-for-enhanced-search-capabilities/",
        "teaser": null
      },{
        "title": "What is RabbitMQ and How to Install It on Ubuntu?",
        "excerpt":"RabbitMQ, a robust and flexible open-source message broker, plays a crucial role in enabling efficient communication between distributed systems. It provides a reliable messaging framework, making it easier to build scalable and loosely coupled applications. In this blog post, we will delve into the world of RabbitMQ, exploring its features and benefits, and guide you through the installation process on Ubuntu.   1. Understanding RabbitMQ:   RabbitMQ is a message broker that implements the Advanced Message Queuing Protocol (AMQP). It acts as an intermediary, receiving messages from producers and delivering them to consumers, ensuring seamless communication between various components of distributed systems. RabbitMQ supports multiple messaging patterns, including point-to-point, publish/subscribe, and request/reply, making it highly versatile.   2. Key Features of RabbitMQ:   RabbitMQ offers several essential features that make it a popular choice for message queuing. Some notable features include:      Message Durability: RabbitMQ can persist messages to disk, ensuring they are not lost even in the event of system failures.   Message Routing: Messages can be routed based on various criteria, such as topic, header, and pattern matching, allowing for flexible message handling.   Clustering: RabbitMQ supports clustering, enabling high availability and scalability. Multiple RabbitMQ nodes can be grouped together, forming a logical unit for increased performance and fault tolerance.   Lightweight and High Performance: RabbitMQ is written in Erlang, known for its concurrency and fault-tolerant capabilities, making RabbitMQ highly performant and resource-efficient.   Management UI: RabbitMQ provides a web-based management console, allowing users to monitor queues, exchanges, and connections, making it easier to manage and troubleshoot the message broker.   3. RabbitMQ Installation on Ubuntu:   Now, let’s dive into the installation process of RabbitMQ on Ubuntu.   3.1. Preparing the Environment:   Before installing RabbitMQ, ensure that your Ubuntu system is up to date. Open the terminal and run the following commands:   sudo apt update sudo apt upgrade  3.2. Installing Erlang:   RabbitMQ is built on the Erlang programming language. To install Erlang, execute the following command:   sudo apt install erlang  3.3. Adding the RabbitMQ Repository:   To obtain the latest version of RabbitMQ, add the RabbitMQ repository to your system. Run the following commands:   wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add - echo \"deb https://dl.bintray.com/rabbitmq/debian $(lsb_release -sc) main\" | sudo tee /etc/apt/sources.list.d/rabbitmq.list  3.4. Installing RabbitMQ:   After adding the repository, update the package list and install RabbitMQ:   sudo apt update sudo apt install rabbitmq-server  3.5. Starting and Enabling RabbitMQ:   To start the RabbitMQ service and enable it to start on boot, run the following commands:   sudo systemctl start rabbitmq-server sudo systemctl enable rabbitmq-server  4. Configuring RabbitMQ:   By default, RabbitMQ listens on localhost (127.0.0.1) and accepts connections on port 5672. To configure RabbitMQ further, including network bindings, authentication, and SSL/TLS. Let’s see how to configure it:   4.1. Enabling the Management Plugin   RabbitMQ provides a web-based management interface that allows you to monitor and manage your message queues effectively. To enable this plugin, follow these steps:   1. Open a terminal window.   2. Enable the RabbitMQ management plugin by executing the command:   sudo rabbitmq-plugins enable rabbitmq_management  3. Restart the RabbitMQ service to apply the changes:   sudo service rabbitmq-server restart  4.2. Accessing the RabbitMQ Management Console   Now that the management plugin is enabled, you can access the RabbitMQ management console through a web browser. Follow these steps:      Open your preferred web browser.   In the address bar, enter the following URL: http://localhost:15672/   You should now see the RabbitMQ login page. Enter the default credentials            Username: guest       Password: guest           Note: It’s recommended to change the default credentials for security reasons.   RabbitMQ has a Management Console plugin that allows you to perform various management and monitoring tasks via a web-based interface. You can manage exchanges, queues, bindings, users, and other RabbitMQ objects, as well as monitor things like memory usage, message rates, connections, and other processes. To check the list of all available RabbitMQ plugins, run the following command:   sudo rabbitmq-plugins list     4.3. Setting Up RabbitMQ Administrative User   To add an admin user to RabbitMQ, follow these steps:   1. Open a terminal window and execute the following command to add a new user:   sudo rabbitmqctl add_user &lt;username&gt; &lt;password&gt;  Replace &lt;username&gt; and &lt;password&gt; with your desired values. For example, to add an admin user with the username “admin” and password “secretpassword,” run:   sudo rabbitmqctl add_user admin secretpassword  2. Grant administrative privileges to the newly created user by executing the following command:   sudo rabbitmqctl set_user_tags &lt;username&gt; administrator  3. Finally, update the permissions for the new admin user using the following command:   sudo rabbitmqctl set_permissions -p / &lt;username&gt; \".*\" \".*\" \".*\"  Note: You can also delete an existing user like this:   sudo rabbitmqctl delete_user &lt;username&gt;  5. Conclusion:   Congratulations! You have successfully installed RabbitMQ on your Ubuntu system. RabbitMQ offers a robust and feature-rich messaging system, allowing seamless communication between components of distributed systems. By leveraging its key features, such as message durability, routing, clustering, and management UI, you can build scalable and reliable applications.   Remember to explore RabbitMQ’s extensive documentation to unlock its full potential and discover advanced configuration options. Enjoy using RabbitMQ to supercharge your message-based communication!   Happy coding! ✌️  ","categories": ["Coding","Coding Tips"],
        "tags": ["backend","backend development","coding tips","hosting","magento","php","server","tips","troubleshooting","web development"],
        "url": "/2023/05/21/what-is-rabbitmq-and-how-to-install-it-on-ubuntu/",
        "teaser": null
      },{
        "title": "How to Install Magento 2 on Ubuntu/Debian?",
        "excerpt":"Magento is a popular e-commerce platform that allows businesses to create and manage their online stores. In this blog, we will guide you through the steps to install Magento 2 on Ubuntu.   Prerequisites   Before installing Magento, you will need LEMP system ready along with other system requirements such as Elasticsearch and RabbitMQ. You may follow these blogs to install all the prerequisites and prepare your system for Magento installation:      Windows Subsystem for Linux (If you are using a Windows system)   LEMP (Linux, Nginx, MySQL, PHP)   Composer   Elasticsearch   RabbitMQ   Preparing the Database   As our system is now ready with all the prerequisites, we now need a new database where all Magento related tables, triggers etc. would be created. So, let’s see how it can be done:   1. Connecting into MySQL   mysql -u &lt;username&gt; -p -h &lt;hostname&gt;  It will prompt you to enter the password that you might had set during the previous process.   2. Creating the Database   Once you are connected to MySQL, you can use these commands to create a database:   CREATE DATABASE &lt;database_name&gt;;  Now, database is created. You can use other tools like phpMyAdmin or Adminer to create and manage database too.   Installing Magento 2.x   Before we start the installation process, you will need authentication keys. Follow this link to create it and store it somewhere.   Now, let’s start with the installation process:   1. Navigate to the directory where you want to install Magento  2. Run this command to download the metapackage of Magento:   composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition &lt;install-directory-name&gt;  For any Specific version of Magento, you can change the above command like this:   composer create-project --repository-url=https://repo.magento.com/ magento/project-enterprise-edition=2.4.3 &lt;install-directory-name&gt;  3. Setting the file permissions:   cd &lt;install-directory-name&gt; find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w {} + find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} + chown -R :www-data . # Ubuntu chmod u+x bin/magento  4. Installing Magento:   bin/magento setup:install \\ --base-url=http://your-store-url.com \\ --db-host=127.0.0.1 \\ --db-name=&lt;database_name&gt; \\ --db-user=&lt;database_user&gt; \\ --db-password=&lt;database_user_password&gt; \\ --admin-firstname=admin \\ --admin-lastname=admin \\ --admin-email=admin@admin.com \\ --admin-user=admin \\ --admin-password=&lt;admin_password&gt; \\ --language=en_US \\ --currency=USD \\ --timezone=America/Chicago \\ --use-rewrites=1 \\ --amqp-host=\"127.0.0.1\" \\ --amqp-port=\"5672\" \\ --amqp-user=\"&lt;rabbitmq_username&gt;\" \\ --amqp-password=\"&lt;rabbitmq_password&gt;\" \\ --amqp-virtualhost=\"/\"  Please make sure to replace the values in the above command with the correct ones that you have setup with.   Once the above command is completed, you should be able to access your Magento store URL like this: http://your-store-url.com and the admin panel with such url: http://your-store-url.com/admin         Conclusion:   Congratulations! You’ve successfully installed Magento 2.4 on Ubuntu. By following this step-by-step guide, you’re now ready to unleash the power of Magento and create your own feature-rich e-commerce store. Remember to keep your system up to date and regularly backup your Magento installation for enhanced security and peace of mind. Happy selling!   Reference: Quick start install - Adobe Commerce Developer Guide  ","categories": ["Magento","Magento 2","Magento 2 Installation and Troubleshooting","Tutorial"],
        "tags": ["backend development","coding","debian","ecpm","installation","magento","magento 2","programming","ubuntu"],
        "url": "/2023/05/30/how-to-install-magento-2-on-ubuntu-debian/",
        "teaser": null
      },{
        "title": "Magento 2: How to Use Console Command Shortcuts?",
        "excerpt":"In the realm of Magento 2, efficiency and productivity are essential for developers and administrators. One often overlooked feature that can greatly enhance your workflow is the use of console command shortcuts. These shortcuts allow you to quickly execute common commands, saving you valuable time and effort. In this blog post, we will explore how to leverage Magento 2 console command shortcuts effectively, helping you optimize your development process.   Understanding Magento 2 Console Commands   Before diving into shortcuts, let’s quickly recap the significance of Magento 2 console commands. The Magento 2 command-line interface (CLI) empowers developers to perform various tasks, such as clearing cache, compiling code, reindexing data, and more. The CLI provides a convenient way to interact with your Magento store without the need for a graphical user interface (GUI).   You can check the entire list of commands by running this command:   php bin/magento list  Why Use Console Command Shortcuts?   By default, executing Magento 2 console commands requires typing lengthy commands each time. This process can be time-consuming, especially when working on repetitive tasks. Console command shortcuts provide a solution by allowing you to create abbreviated versions of frequently used commands. These shortcuts significantly reduce typing effort and enhance your efficiency.   This shortcut feature comes due to the Symphony framework which is used by each console class that implement command line functionality. The use Symfony\\Component\\Console\\Command component to implement command line features. You can learn more in the documentation of Symphony framework. You can use shortest unambiguous name instead of full name, e.g. s instead of setup.   Now, let’s see shortcuts for some of the commonly used Magento 2 console commands:   1. Cache Commands   php bin/magento cache:clean ==&gt; php bin/magento c:c  php bin/magento cache:disable ==&gt; php bin/magento c:d  php bin/magento cache:enable [cache_type] ==&gt; php bin/magento c:e [cache_type] php bin/magento cache:flush [cache_type] ==&gt; php bin/magento c:f [cache_type] php bin/magento cache:status ==&gt; php bin/magento c:s  Where cache_type is the parameter in which you can pass one or more cache types separated by whitespaces, e.g.   php bin/magento c:c config layout  2. Indexer Commands   php bin/magento indexer:reindex ==&gt; php bin/magento i:rei  php bin/magento indexer:info ==&gt; php bin/magento i:i  php bin/magento indexer:status ==&gt; php bin/magento i:sta  php bin/magento indexer:show-mode ==&gt; php bin/magento i:sho  php bin/magento indexer:reset ==&gt; php bin/magento i:res  You may pass parameters for particular indexer type as well.   3. Compile Command   php bin/magento setup:di:compile ==&gt; php bin/magento s:di:c  4. Setup Upgrade Command   php bin/magento setup:upgrade ==&gt; php bin/magento s:up  5. Static Content Deploy Command   php bin/magento setup:static-content:deploy ==&gt; php bin/magento s:s:d  6. Module Management Commands   php bin/magento module:status ==&gt; php bin/magento mo:s  php bin/magento module:disable Namespace_Module ==&gt; php bin/magento mo:d Namespace_Module php bin/magento module:enable Namespace_Module ==&gt; php bin/magento mo:e Namespace_Module php bin/magento module:uninstall Namespace_Module ==&gt; php bin/magento m:u Namespace_Module  Best Practices for Console Command Shortcuts   To make the most of Magento 2 console command shortcuts, keep the following best practices in mind:      Choose intuitive and memorable aliases to ensure easy recall.   Document your shortcuts for future reference or to share them with your team.   Regularly review and update your shortcuts to adapt to evolving development requirements.   Be cautious when creating shortcuts to avoid potential conflicts with existing commands.   Conclusion   Magento 2 console command shortcuts are a valuable asset for developers and administrators seeking to optimize their workflow. By implementing these shortcuts, you can save time, reduce typing effort, and improve overall productivity. Take advantage of this powerful feature and explore the possibilities it offers. With Magento 2 console command shortcuts in your arsenal, you’ll be able to streamline your development process like never before.   Remember, every second saved adds up to increased efficiency and success in your Magento 2 endeavors. Start leveraging console command shortcuts today and experience the benefits firsthand!   Happy coding! 🙂   Note: When implementing these shortcuts, ensure you have the necessary permissions and backup your Magento installation to avoid any unintended consequences.  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies"],
        "tags": ["backend development","commands","magento","programming","tips","troubleshooting"],
        "url": "/2023/06/26/magento-2-how-to-use-console-command-shortcuts/",
        "teaser": null
      },{
        "title": "How to Disable Two-Factor Authentication (2FA) in Magento 2?",
        "excerpt":"Two-factor authentication (2FA) is a crucial security feature that adds an extra layer of protection to your Magento store. However, there may be instances where you need to temporarily or permanently disable it for various reasons. In this blog post, we will guide you through the process of disabling two-factor authentication on Magento, ensuring a seamless experience for store administrators. Read on to learn the step-by-step procedure.   Understanding Two-Factor Authentication in Magento   The Magento Two-Factor Authentication (2FA) feature enhances security by implementing a two-step authentication process for accessing the Admin UI from any device. This extension offers support for various authenticators such as Google Authenticator, Authy, Duo, and U2F keys. It specifically applies to users accessing the Admin UI and does not affect customer accounts on the storefront.   With Two-Factor Authentication, you can:      Activate authenticator support for the Admin.   Globally or individually manage and customize authenticator settings for user accounts.   Reset authenticators and oversee trusted devices for users.   Disabling Two-Factor Authentication in Magento   Using Admin Panel   Step 1: Access the Magento Admin Panel:   To begin, log in to your Magento Admin Panel using your administrator credentials. Enter your username and password in the respective fields and click on the “Sign In” button.   Step 2: Navigate to the “Security” Settings:   Once logged in, locate the “Stores” option in the top menu and click on it. From the drop-down menu, select “Configuration.” In the left sidebar, you will find the “Advanced” section. Under this section, click on “Admin.”   Step 3: Disable Two-Factor Authentication:   In the “Admin” settings page, scroll down until you find the “Security” tab. Under this tab, you will see the “Two-Factor Authentication” option. To disable 2FA, set the “Enable Two-Factor Authentication” toggle switch to “No.”   Step 4: Save the Configuration:   After disabling 2FA, scroll to the top right corner of the page and click on the “Save Config” button to save your changes. Magento will display a success message confirming that the configuration has been saved.   Step 5: Clear Cache:   To ensure that the changes take effect immediately, it is recommended to clear the cache. From the Magento Admin Panel, go to “System” in the top menu and select “Cache Management.” Click on the “Flush Magento Cache” button to clear the cache.   Using Command Line Interface (CLI)   You can disable 2FA in Magento using Magento commands too. Connect to SSH, navigate to the directory where Magento is installed and run the following commands:   php bin/magento module:disable Magento_AdminAdobeImsTwoFactorAuth php bin/magento module:disable Magento_TwoFactorAuth php bin/magento setup:upgrade  Verify 2FA Deactivation   To confirm that two-factor authentication has been disabled, log out of your Magento Admin Panel and attempt to log back in. You should now be able to access the panel without being prompted for a two-factor authentication code.   Conclusion   Disabling two-factor authentication on Magento is a straightforward process that can be completed in just a few simple steps. By following this guide, you can conveniently disable 2FA when necessary, streamlining the login process for your Magento store. Remember, while 2FA offers an additional layer of security, it may be temporarily disabled for specific purposes like development or troubleshooting. Stay vigilant and maintain the security of your Magento store while ensuring a seamless user experience.   Important Note: Remember to re-enable two-factor authentication once you’ve completed the required tasks to maintain the utmost security for your Magento store.  ","categories": ["Coding","Magento","Magento 2","Magento 2 - Tips and Quickies","Magento 2 Installation and Troubleshooting"],
        "tags": ["2fa","backend development","magento","magento developer","magento2","security","troubleshooting","web development"],
        "url": "/2023/06/26/how-to-disable-two-factor-authentication-in-magento-2/",
        "teaser": null
      },{
        "title": "Switch vs Match in PHP: Choosing the Right Control Structure for Your Code",
        "excerpt":"When it comes to writing efficient and readable code in PHP, selecting the appropriate control structure is crucial. In PHP 8, two new control structures were introduced: “match” and “switch”. These structures offer a more concise and expressive way to handle multiple conditions. In this blog post, we will explore the differences between switch and match in PHP and discuss when to use each one, helping you make an informed decision for your coding needs.   Understanding “switch” in PHP   The switch statement has been a staple in PHP for a long time, providing a simple way to check a variable against multiple conditions. It allows you to execute different blocks of code based on the value of a variable. Here’s a basic syntax example:   switch ($variable) {     case 'value1':         // Code block to execute if $variable is 'value1'         break;     case 'value2':         // Code block to execute if $variable is 'value2'         break;     default:         // Code block to execute if $variable does not match any cases }  The switch statement evaluates the value of the variable against the cases defined using “case” and executes the corresponding code block. If no matches are found, the code block defined in “default” is executed.   Introducing “match” in PHP 8.x   With the release of PHP 8, the “match” expression was introduced as a more robust alternative to switch. Match provides a more concise syntax and offers additional features, making it an attractive option for handling complex conditions. Let’s take a look at an example:   $result = match ($variable) {     'value1' =&gt; 'Result 1',     'value2' =&gt; 'Result 2',     default =&gt; 'Default Result', };  In this example, the match expression evaluates the value of the variable and returns the corresponding result. If no matches are found, the value specified in “default” is returned. Match expressions are more flexible than switch statements, as they can evaluate arbitrary expressions, not just variables.   Differences between Switch and Match      Conciseness and Readability: Match expressions are generally more concise and readable compared to switch statements. The match expression allows you to define the expected results directly, whereas switch requires explicit “case” statements followed by blocks of code.   Strict Comparison: Switch statements use loose comparison (==), meaning type coercion can occur during evaluations. Match expressions, on the other hand, use strict comparison (===) by default, ensuring both the value and type match.   Return Value: Match expressions can return a value, making them suitable for assigning results directly to variables. Switch statements don’t have a direct return value; instead, you need to use additional variables to store the result.   Exhaustiveness Check: Match expressions require that all possible values are covered by the defined cases. If a value is missing, PHP will raise a warning. Switch statements do not have this requirement, allowing for unintentional omissions.   Choosing the Right Control Structure   While both switch and match have their merits, choosing the appropriate control structure depends on the specific requirements of your code. Here are some guidelines to help you make the right decision:      Use switch when you need to perform different actions based on the value of a variable and require fall-through behavior between cases.   Use match when you want to perform simple value matching and need a concise and expressive syntax.   Consider match for complex conditions, as it offers strict comparison, return values, and exhaustiveness checks.   Conclusion   In PHP 8, the introduction of match expressions provides developers with a more concise and powerful alternative to switch statements. The switch statement remains a reliable choice for simple value-based conditions with fall-through behavior. However, match expressions offer a more modern syntax, strict comparison, and the ability to return values directly. By understanding the differences between switch and match, you can make informed decisions and write cleaner, more efficient code in PHP.   If you need any more help, feel free to contact me. Happy Coding ✌️  ","categories": ["Coding","Coding Tips","PHP"],
        "tags": ["backend development","coding tips","php","programming","web development"],
        "url": "/2023/07/17/switch-vs-match-in-php-choosing-the-right-control-structure-for-your-code/",
        "teaser": null
      },{
        "title": "Creating Your First &#8220;Hello World&#8221; Module in Magento 2: A Beginner&#8217;s Guide",
        "excerpt":"In this blog post we will see how to create simple “HelloWorld” module in magento2.   In magento2 all modules reside in the folder app/code, previously in magento1 there was the concept of local/ community/ core/ folders but that has been removed now.  In this blog post we will see how to create a new module, create a route and display “Hello World”   Step 1: Creating The Directory Structure   Module names in Magento 2 are divided into two part “VendorName_ModuleName”  e.g Magento_Contact, Magento_Catalog or ManishJoy_HelloWorld   First part is the vendor name which can be your company name and second part is the actual module name.   Let’s take our module name to be “ManishJoy_HelloWorld”. First we need to make the directory structure for this module:   app/code/ManishJoy/HelloWorld   Step 2: Creating module.xml   Introduce your module by creating a module.xml file within the /etc directory of your component like this:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;     &lt;module name=\"ManishJoy_HelloWorld\" setup_version=\"1.0.0\"/&gt; &lt;/config&gt;  The “name” attribute specifies your module’s name and is mandatory for all components. If you’re not utilizing the Declarative Schema for managing installation and upgrades, include the “setup_version” attribute in the module tag. Assign the “setup_version” value to match your module’s database schema version. If you’re using Declarative Schema, there’s no need for the “setup_version” attribute.   If you don’t have any idea about “Declarative Schema”, don’t worry. We will discuss in details in some other blog. In this blog, let’s focus on the basics of creating your first Magento 2 extension(module).   Step 3: Creating registration.php   To register your module, you need to create a registration.php file with the following content:   &lt;?php \\Magento\\Framework\\Component\\ComponentRegistrar::register(     \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,     'ManishJoy_HelloWorld',     __DIR__ );  Step 4: Enabling the Module   Now an empty module is ready, we now need to enable it. Before that, check and verify your directory structure, it should look like this:      At this stage if you run this command   bin/magento module:status  You should see   List of disabled modules: ManishJoy_HelloWorld   This means the module is setup, but it is disabled right now. To enable the module, run this command:   php bin/magento module:enable ManishJoy_HelloWorld  This should enable your module. Another way of doing this is, go to this file:   app/etc/config.php   You will see a long list of modules there, just add your module as well:   ... 'ManishJoy_HelloWorld' =&gt; 1, ....   This will enable your module as well. After this step, when you open your website in browser you will get an error saying:   Please upgrade your database: Run \"bin/magento setup:upgrade\" from the Magento root directory.   To fix this, just run the setup:upgrade command:   bin/magento setup:upgrade  At this point you are all set with an empty module.   Step 5: Creating Your first Route and Testing Your Module   As we have created an empty module and have enabled it too. But you cannot see any impact of this module. Let’s create a new URL and display “Hello World”. In order to do it, we need to create a Magento Route and Controller.   Routes/URLs in Magento are divided into 3 parts like this:   http://yourbaseurl.com/route_id/controller/action   To add a route, we need to add routes.xml file in your module like at app/code/ManishJoy/HelloWorld/etc/frontend/routes.xml   Since this is a frontend route, we added it in frontend/ directory else we need to add it to adminhtml/ directory.   This will the content of this file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"../../../../../../lib/internal/Magento/Framework/App/etc/routes.xsd\"&gt;     &lt;router id=\"standard\"&gt;         &lt;route id=\"manishjoy\" frontName=\"manishjoy\"&gt;             &lt;module name=\"ManishJoy_HelloWorld\" /&gt;         &lt;/route&gt;     &lt;/router&gt; &lt;/config&gt;    We usually keep id and frontName the same (we will discuss these keywords in detail in some other blog. Let’s just focus on creating your first route and displaying “Hello World”).   Here we defined the first part of our route. So till now our route is   http://yourbaseurl.com/manishjoy/*   Next, we need to define our controller and action. Let’s assume we want our URL to be   http://yourbaseurl.com/manishjoy/hello/world   For this, we need create the controller file at this path: app/code/ManishJoy/HelloWorld/Controller/Hello/World.php   Now let’s add the code to our Controller World.php   &lt;?php namespace ManishJoy\\HelloWorld\\Controller\\Hello;  use Magento\\Framework\\App\\Action\\HttpGetActionInterface;  class World extends \\Magento\\Framework\\App\\Action\\Action  implements HttpGetActionInterface {         public function execute()     {         echo 'Hello World';         exit;     }  }  Now you are all set, now you can open the URL http://yourbaseurl.com/manishjoy/hello/world to test it. If you have followed all of the above steps properly, you should be able to see the output “Hello World” displayed on the page.   Important   1. There is another important thing to note, if you miss out controller or action name it automatically defaults to Index. Meaning, a url like http://yourbaseurl.com/manishjoy would find path  ManishJoy/HelloWorld/Controller/Index/Index.php  2. Another important thing, magento create auto generated files at var/generation/ManishJoy/HelloWorld/Controller . So if your noticing that, your making changes to controller and the changes are not showing up. Make sure to run setup:di:compile command   Conclusion   Congratulations, you have created your first module in Magento. We will learn more advanced features and customizations in the upcoming blogs of the Module Development Series.  ","categories": ["Magento 2","Magento 2 Module Development Series"],
        "tags": ["backend development","coding","magento","module development","php","web development"],
        "url": "/2023/08/11/creating-your-first-hello-world-module-in-magento-2-a-beginners-guide/",
        "teaser": null
      },{
        "title": "Layout and Blocks in Magento 2.x",
        "excerpt":"In this blog post, we will see how to add layout file and block to your module   In the previous blog, we created an ManishJoy_HelloWorld module. Using the same module, we will display “Hello World” again but this time using layout/block with a proper page structure.   Now, let’s start with the steps:   Step 1: Controller   In the previous World.php controller file, we had simply displayed “Hello World” on an empty page without any CSS/Stylying getting applied to it. We will remove that and use the layout system of Magento.   The new code for World.php controller would be:   &lt;?php namespace ManishJoy\\HelloWorld\\Controller\\Hello;   use Magento\\Framework\\App\\Action\\HttpGetActionInterface;   class World extends \\Magento\\Framework\\App\\Action\\Action  implements HttpGetActionInterface {         protected $resultPageFactory;      public function __construct(         \\Magento\\Framework\\App\\Action\\Context $context,         \\Magento\\Framework\\View\\Result\\PageFactory $resultPageFactory     )     {         $this-&gt;resultPageFactory = $resultPageFactory;                return parent::__construct($context);     }           public function execute()     {         return $this-&gt;resultPageFactory-&gt;create();      }  }  Here we have injected ‘PageFactory’ into the controller’s constructor and which is used further to initialize the layout in execute().   Dependency Injection, is one of the major changes in Magento 2 and will discuss it in detail later. For now, just use this code directly.   Step 2: Layout   Now we will setup the layout file for our action.   In Magento 2 all layout files of a module are located at “view/frontend/layout” folder of a module and for each route we need to create a different layout file. In our case the file would be:   ManishJoy/HelloWorld/view/frontend/layout/manishjoy_hello_world.xml   The content of this file would be:   &lt;?xml version=\"1.0\"?&gt; &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" layout=\"1column\" xsi:noNamespaceSchemaLocation=\"../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd\"&gt;            &lt;referenceContainer name=\"content\"&gt;         &lt;block             template=\"ManishJoy_HelloWorld::content.phtml\"             class=\"ManishJoy\\HelloWorld\\Block\\Main\"             name=\"manishjoy_layout_test\"/&gt;     &lt;/referenceContainer&gt; &lt;/page&gt;  Magento 2 also supports a layout file named default.xml, which gets loaded for all of the actions of any module/action.   Step 3: Block   In the previous step, we defined our layout with a keyword “class”, which is our block class. Now, let’s create this class at this path: ManishJoy/HelloWorld/Block/Main.php   The code for this file would be:   &lt;?php namespace ManishJoy\\HelloWorld\\Block;    class Main extends \\Magento\\Framework\\View\\Element\\Template {        public function __construct(         \\Magento\\Framework\\View\\Element\\Template\\Context $context     )     {         parent::__construct($context);     }          protected function _prepareLayout()     {     } }  This is a simple and empty block with no functions as we are just doing the basic operations here.   Step 4: Template   Now that our block file is set, next we need to set the template file.   Templates for a module are located in “view/frontend/templates” directory so we need to create the file at this path optionally   ManishJoy/HelloWorld/“view/frontend/templates/content.phtml   Let’s now add “Hello World” to this page:   &lt;h1&gt;&lt;?php echo __('Hello World'); ?&gt;&lt;/h1&gt;  Now you are all set, now you can open the URL http://yourbaseurl.com/manishjoy/hello/world to test it.   You will see “Hello World” again but with full page layout (header, footer etc.)   Note: __() is the i18n (multiple language/localization) function for magento2. We should always use this and never directly display a string.   Step 5: Passing data from Block to Template   In step 3, we created a very basic block and in step 4, we simply had displayed a static string “Hello World”. But in real world, we need to fetch data etc. and show it in the template. But, We cannot create functions in template files to do such operations. Now let’s see how can we pass data from Block to template (phtml) files.   &lt;?php namespace ManishJoy\\HelloWorld\\Block;    class Main extends \\Magento\\Framework\\View\\Element\\Template {        public function __construct(         \\Magento\\Framework\\View\\Element\\Template\\Context $context     )     {         parent::__construct($context);     }      protected function _prepareLayout()     {         $this-&gt;setText('Hello World');     } }  As you can see we have used this $this-&gt;setText('Hello World'); to send data from block.   Now in the template file, you need to update the code like this to fetch this data and display:   &lt;?php echo $block-&gt;getText(); ?&gt; ","categories": ["Magento 2","Magento 2 Module Development Series"],
        "tags": ["backend development","module development","module development series","programming","web development"],
        "url": "/2023/08/12/layout-and-blocks-in-magento-2-x/",
        "teaser": null
      },{
        "title": "Event and Observer in Magento 2: A Comprehensive Guide",
        "excerpt":"Magento 2’s Event and Observer system is a powerful mechanism that allows developers to customize and extend the platform’s functionality without modifying the core code. In this guide, we’ll delve into the concepts of events and observers in Magento 2, how they work, and how you can leverage them to enhance your e-commerce store.   What Are Events and Observers?   Events in Magento 2 are actions that trigger custom code at specific points during the application flow. For example, when a product is saved or a customer places an order, an event is dispatched.   Observers are methods that listen for specific events and execute custom code when those events occur. By using observers, developers can add custom functionality in response to various events.   Why Use Events and Observers?      Decoupled Code: Events and observers allow you to extend Magento 2 functionality without modifying core files, ensuring better maintainability and upgrade compatibility.   Reusability: Custom functionality can be reused across different parts of the application.   Flexibility: Easily add, remove, or modify features based on events in the system.   Key Events in Magento 2   Some of the commonly used events in Magento 2 include:      customer_login   customer_logout   checkout_cart_save_after   catalog_product_save_before   sales_order_place_after   Creating a Custom Observer in Magento 2   Let’s walk through the steps to create a custom observer in Magento 2.   Step 1: Create a Custom Module   First, create a custom module. For example, let’s call it Vendor_Module.   Step 2: Define the Event and Observer   Create the events.xml file in app/code/Vendor/Module/etc/frontend/ (or adminhtml for admin-specific events).   &lt;!-- app/code/Vendor/Module/etc/frontend/events.xml --&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Event/etc/events.xsd\"&gt;     &lt;event name=\"checkout_cart_save_after\"&gt;         &lt;observer name=\"vendor_module_checkout_cart_save_after\" instance=\"Vendor\\Module\\Observer\\CartSaveAfter\" /&gt;     &lt;/event&gt; &lt;/config&gt;   Step 3: Create the Observer Class   Create the observer class in app/code/Vendor/Module/Observer/.   &lt;?php namespace Vendor\\Module\\Observer;  use Magento\\Framework\\Event\\Observer; use Magento\\Framework\\Event\\ObserverInterface;  class CartSaveAfter implements ObserverInterface {     public function execute(Observer $observer)     {         // Your custom logic here         $cart = $observer-&gt;getEvent()-&gt;getCart();         // For example, log the cart items         foreach ($cart-&gt;getQuote()-&gt;getAllItems() as $item) {             // Custom logic with $item         }     } }   Step 4: Enable the Module   Enable the module by running the following commands:   php bin/magento module:enable Vendor_Module php bin/magento setup:upgrade php bin/magento cache:clean   Testing Your Custom Observer   After following the above steps, your custom observer should now be listening for the checkout_cart_save_after event. You can test it by adding products to the cart and observing the custom logic in action.   Conclusion   The Event and Observer system in Magento 2 provides a flexible way to customize and extend the platform’s functionality. By leveraging this powerful mechanism, you can add custom features, improve maintainability, and ensure upgrade compatibility. Start experimenting with events and observers in your Magento 2 projects and unlock the full potential of your e-commerce store.   Keywords and Meta Description   Keywords: Magento 2 events, Magento 2 observers, custom observer in Magento 2, Magento 2 event handling, Magento 2 development   Meta Description: Learn how to use events and observers in Magento 2 to customize and extend your e-commerce store’s functionality. This comprehensive guide covers key concepts, creating custom observers, and practical examples.  ","categories": ["Magento","Magento 2","Magento 2 Module Development Series","Tutorial"],
        "tags": ["frontend development","magento","magento developer","magento2","php","programming","theme development","tutorial","web development"],
        "url": "/2024/07/21/event-and-observer-in-magento-2-a-comprehensive-guide/",
        "teaser": null
      },{
        "title": "Jekyll vs WordPress: Which Platform is Best for Bloggers?",
        "excerpt":"When it comes to starting a blog, choosing the right platform is crucial. Two popular options for bloggers are Jekyll and WordPress. Each has its own strengths and weaknesses, making them suitable for different types of bloggers. In this blog post, we will compare Jekyll vs WordPress, highlighting their features, pros, and cons to help you make an informed decision.   Table of Contents     Introduction to Jekyll and WordPress   Ease of Use   Customization and Flexibility   Performance   Security   Cost   SEO Capabilities   Conclusion   Introduction to Jekyll and WordPress   Jekyll is a static site generator written in Ruby. It takes your content, written in Markdown or HTML, and creates a static website. Jekyll is highly favored by developers and tech-savvy bloggers who prefer a hands-on approach and want full control over their site’s structure and performance.   WordPress is a dynamic content management system (CMS) written in PHP. It powers over 40% of all websites on the internet. WordPress offers a user-friendly interface and a vast array of plugins and themes, making it accessible to bloggers without a technical background.   Ease of Use   Jekyll:     Requires knowledge of command-line operations and Git.   Ideal for bloggers comfortable with coding and managing a development environment.   Limited graphical user interface (GUI) support.   WordPress:     Beginner-friendly with an intuitive dashboard.   No coding knowledge required for basic usage.   Extensive documentation and community support, perfect for new bloggers.   Customization and Flexibility   Jekyll:     Highly customizable through code.   Uses Liquid templating language for advanced customization.   Flexible structure, but changes require coding skills.   WordPress:     Thousands of themes and plugins available for easy customization.   Drag-and-drop page builders for creating blog layouts.   No coding required for most customizations, but developers can extend functionality for advanced needs.   Performance   Jekyll:     Static sites load faster as they don’t require database queries.   Lower server resource usage.   Ideal for content-heavy blogs with a focus on speed and reliability.   WordPress:     Can be slower due to dynamic content and database queries.   Requires optimization techniques (caching, CDN, etc.) for better performance.   Plugins can affect load times, so careful management is needed.   Security   Jekyll:     More secure by default due to its static nature.   No database, so fewer attack vectors.   Relies on GitHub Pages or other static site hosts for deployment, enhancing security.   WordPress:     Frequent target for hackers due to popularity.   Requires regular updates and security plugins to maintain security.   Vulnerable plugins and themes can be exploited if not managed properly.   Cost   Jekyll:     Free to use, but may incur costs for hosting.   No need for premium plugins or themes, keeping costs low for bloggers on a budget.   WordPress:     Free core software, but premium themes and plugins can add up.   Hosting costs vary based on provider and site requirements.   Managed WordPress hosting can be more expensive but offers additional features and support.   SEO Capabilities   Jekyll:     Requires manual optimization for SEO.   Lacks built-in SEO tools, but can integrate with third-party tools.   Clean, fast-loading code is beneficial for SEO, which is crucial for blog visibility.   WordPress:     Numerous SEO plugins available (e.g., Yoast SEO).   User-friendly tools for optimizing blog content and metadata.   Dynamic content can benefit from regular updates and SEO strategies to improve search engine rankings.   Conclusion   Choosing between Jekyll and WordPress depends on your specific needs and technical expertise as a blogger.      Choose Jekyll if: You have coding skills, prefer static sites, prioritize security and performance, and want a highly customizable setup. It’s perfect for tech-savvy bloggers who want complete control over their blog.   Choose WordPress if: You seek ease of use, extensive customization options without coding, robust SEO tools, and a vast support community. It’s ideal for bloggers who want a quick start with plenty of resources and support.   Both platforms have their merits, so consider your blogging goals and personal preferences before making a decision. Whether you go with Jekyll or WordPress, you can build a successful blog tailored to your needs.  ","categories": ["Coding","Coding Tips"],
        "tags": ["better coding","coding","coding tips","tips","SEO","Web Development"],
        "url": "/2024/07/21/jekyll-vs-wordpress-which-platform-is-best-for-bloggers/",
        "teaser": null
      },{
        "title": "Creating an Online Payment Method in Magento 2: A Step-by-Step Guide",
        "excerpt":"Magento 2 is a versatile and powerful eCommerce platform that provides extensive customization options for developers. One essential feature for any online store is the ability to offer various payment methods. In this blog post, we’ll show you how to create a custom online payment method in Magento 2. Follow this step-by-step guide, complete with code snippets, to integrate your own payment solution into Magento 2.   Why Create a Custom Payment Method?     Business Requirements: Tailor the payment process to meet specific business needs.   Customer Convenience: Provide customers with their preferred payment options.   Integration: Seamlessly integrate with third-party payment gateways not natively supported by Magento.   Step-by-Step Guide to Creating an Online Payment Method:   Step 1: Set Up Your Module  First, create the necessary directories for your custom module:   app/code/Vendor/Module   Next, create the registration.php file:   &lt;?php \\Magento\\Framework\\Component\\ComponentRegistrar::register(     \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,     'Vendor_Module',     __DIR__ );   Then, create the module.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;     &lt;module name=\"Vendor_Module\" setup_version=\"1.0.0\"/&gt; &lt;/config&gt;   Step 2: Define Payment Method Configuration  Create the etc/config.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/config.xsd\"&gt;     &lt;default&gt;         &lt;payment&gt;             &lt;vendor_module&gt;                 &lt;active&gt;1&lt;/active&gt;                 &lt;title&gt;Custom Online Payment&lt;/title&gt;                 &lt;model&gt;Vendor\\Module\\Model\\Payment&lt;/model&gt;                 &lt;order_status&gt;pending&lt;/order_status&gt;                 &lt;is_gateway&gt;1&lt;/is_gateway&gt;                 &lt;allowspecific&gt;0&lt;/allowspecific&gt;                 &lt;group&gt;online&lt;/group&gt;                 &lt;can_authorize&gt;1&lt;/can_authorize&gt;                 &lt;can_capture&gt;1&lt;/can_capture&gt;                 &lt;can_refund&gt;1&lt;/can_refund&gt;             &lt;/vendor_module&gt;         &lt;/payment&gt;     &lt;/default&gt; &lt;/config&gt;   Step 3: Create Payment Model  Create the Model/Payment.php file:   &lt;?php namespace Vendor\\Module\\Model;  use Magento\\Payment\\Model\\Method\\AbstractMethod;  class Payment extends AbstractMethod {     protected $_code = 'vendor_module';      public function isAvailable(         \\Magento\\Quote\\Api\\Data\\CartInterface $quote = null     ) {         return parent::isAvailable($quote);     }      public function authorize(\\Magento\\Payment\\Model\\InfoInterface $payment, $amount)     {         // Custom authorization logic         return $this;     }      public function capture(\\Magento\\Payment\\Model\\InfoInterface $payment, $amount)     {         // Custom capture logic         return $this;     }      public function refund(\\Magento\\Payment\\Model\\InfoInterface $payment, $amount)     {         // Custom refund logic         return $this;     } }   Step 4: Add Admin Configuration  Create the etc/adminhtml/system.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/system_file.xsd\"&gt;     &lt;system&gt;         &lt;section id=\"payment\"&gt;             &lt;group id=\"vendor_module\" translate=\"label\" type=\"text\" sortOrder=\"10\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                 &lt;label&gt;Custom Online Payment&lt;/label&gt;                 &lt;field id=\"active\" translate=\"label\" type=\"select\" sortOrder=\"1\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Enabled&lt;/label&gt;                     &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;                 &lt;/field&gt;                 &lt;field id=\"title\" translate=\"label\" type=\"text\" sortOrder=\"2\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Title&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"order_status\" translate=\"label\" type=\"select\" sortOrder=\"3\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;New Order Status&lt;/label&gt;                     &lt;source_model&gt;Magento\\Sales\\Model\\Config\\Source\\Order\\Status\\NewStatus&lt;/source_model&gt;                 &lt;/field&gt;             &lt;/group&gt;         &lt;/section&gt;     &lt;/system&gt; &lt;/config&gt;   Step 5: Implement Payment Method Logic  Depending on your specific requirements, you may need to implement additional logic for processing payments, handling callbacks, or integrating with third-party APIs. This typically involves extending the payment model and adding custom controllers for handling requests.   Step 6: Configure and Test  Enable the custom payment method in the Magento admin panel:   Stores &gt; Configuration &gt; Sales &gt; Payment Methods &gt; Custom Online Payment   Test the payment method thoroughly to ensure it works as expected in various scenarios, including order placement, payment processing, and refunds.   Conclusion: Creating a custom online payment method in Magento 2 can significantly enhance your store’s flexibility and provide a better customer experience. By following this step-by-step guide, you can develop a tailored payment solution that meets your specific business needs. Remember to adhere to Magento’s best practices and thoroughly test your implementation to ensure a smooth and secure payment process for your customers.  ","categories": ["Magento","Magento 2","Magento 2 Module Development Series","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","Payment Methods"],
        "url": "/2024/07/22/creating-an-online-payment-method-in-magento-2-a-step-by-step-guide/",
        "teaser": null
      },{
        "title": "Magento 2 System.xml Configuration: A Detailed Guide",
        "excerpt":"Magento 2 offers extensive customization options, allowing developers to create custom configurations that can be managed via the admin panel. In this blog post, we’ll guide you through the process of creating system configurations in Magento 2 using system.xml and config.xml. Follow this step-by-step guide to add your own configuration fields in the Magento 2 admin panel.   Why Create Custom System Configurations?     Customization: Tailor the configuration settings to meet specific business needs.   Flexibility: Allow administrators to manage settings without modifying code.   Integration: Easily configure third-party integrations and custom modules.   Step-by-Step Guide to Creating System Configurations:   Step 1: Define System Configuration (system.xml)  Create the etc/adminhtml/system.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/system_file.xsd\"&gt;     &lt;system&gt;         &lt;section id=\"custom_section\" translate=\"label\" type=\"text\" sortOrder=\"10\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;             &lt;label&gt;Custom Configuration&lt;/label&gt;             &lt;tab&gt;general&lt;/tab&gt;             &lt;resource&gt;Vendor_Module::config&lt;/resource&gt;             &lt;group id=\"general\" translate=\"label\" type=\"text\" sortOrder=\"10\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                 &lt;label&gt;General Settings&lt;/label&gt;                 &lt;field id=\"enable\" translate=\"label\" type=\"select\" sortOrder=\"10\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Enable&lt;/label&gt;                     &lt;source_model&gt;Magento\\Config\\Model\\Config\\Source\\Yesno&lt;/source_model&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_text\" translate=\"label\" type=\"text\" sortOrder=\"20\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Text&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_select\" translate=\"label\" type=\"select\" sortOrder=\"30\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Select&lt;/label&gt;                     &lt;source_model&gt;Vendor\\Module\\Model\\Config\\Source\\Options&lt;/source_model&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_multiselect\" translate=\"label\" type=\"multiselect\" sortOrder=\"40\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Multi-Select&lt;/label&gt;                     &lt;source_model&gt;Vendor\\Module\\Model\\Config\\Source\\Options&lt;/source_model&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_date\" translate=\"label\" type=\"date\" sortOrder=\"50\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Date&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_file\" translate=\"label\" type=\"file\" sortOrder=\"60\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom File&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_image\" translate=\"label\" type=\"image\" sortOrder=\"70\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Image&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_password\" translate=\"label\" type=\"password\" sortOrder=\"80\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Password&lt;/label&gt;                 &lt;/field&gt;                 &lt;field id=\"custom_textarea\" translate=\"label\" type=\"textarea\" sortOrder=\"90\" showInDefault=\"1\" showInWebsite=\"1\" showInStore=\"1\"&gt;                     &lt;label&gt;Custom Textarea&lt;/label&gt;                 &lt;/field&gt;             &lt;/group&gt;         &lt;/section&gt;     &lt;/system&gt; &lt;/config&gt;   Step 2: Define Default Configuration Values (config.xml)  Create the etc/config.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/config.xsd\"&gt;     &lt;default&gt;         &lt;custom_section&gt;             &lt;general&gt;                 &lt;enable&gt;1&lt;/enable&gt;                 &lt;custom_text&gt;Default Text&lt;/custom_text&gt;                 &lt;custom_select&gt;option1&lt;/custom_select&gt;                 &lt;custom_multiselect&gt;option1,option2&lt;/custom_multiselect&gt;                 &lt;custom_date&gt;2024-07-22&lt;/custom_date&gt;                 &lt;custom_file&gt;&lt;/custom_file&gt;                 &lt;custom_image&gt;&lt;/custom_image&gt;                 &lt;custom_password&gt;&lt;/custom_password&gt;                 &lt;custom_textarea&gt;Default Text Area&lt;/custom_textarea&gt;             &lt;/general&gt;         &lt;/custom_section&gt;     &lt;/default&gt; &lt;/config&gt;   Step 3: Create ACL Configuration (acl.xml)  To restrict access to your configuration section, create the etc/acl.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;acl xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Acl/etc/acl.xsd\"&gt;     &lt;resources&gt;         &lt;resource id=\"Magento_Backend::admin\"&gt;             &lt;resource id=\"Magento_Config::config\"&gt;                 &lt;resource id=\"Vendor_Module::config\" title=\"Custom Configuration\" sortOrder=\"50\"/&gt;             &lt;/resource&gt;         &lt;/resource&gt;     &lt;/resources&gt; &lt;/acl&gt;   Step 4: Create Source Model for Select Fields (Optional)  If you’re using custom source models for your select and multiselect fields, create the source model class. Here’s an example:   Create the Model/Config/Source/Options.php file:   &lt;?php namespace Vendor\\Module\\Model\\Config\\Source;  use Magento\\Framework\\Option\\ArrayInterface;  class Options implements ArrayInterface {     public function toOptionArray()     {         return [             ['value' =&gt; 'option1', 'label' =&gt; __('Option 1')],             ['value' =&gt; 'option2', 'label' =&gt; __('Option 2')],             ['value' =&gt; 'option3', 'label' =&gt; __('Option 3')],         ];     }      public function toArray()     {         return [             'option1' =&gt; __('Option 1'),             'option2' =&gt; __('Option 2'),             'option3' =&gt; __('Option 3'),         ];     } }   Step 5: Verify and Test  Clear the cache and log in to the Magento admin panel. Navigate to:   Stores &gt; Configuration &gt; General &gt; Custom Configuration   You should see your custom configuration fields under the “General Settings” group. Test by updating the values and verifying they are saved correctly.   Conclusion: Creating custom system configurations in Magento 2 allows you to provide administrators with the flexibility to manage settings directly from the admin panel. By following this step-by-step guide, you can easily add various types of configuration fields, making your Magento 2 module more versatile and user-friendly.  ","categories": ["Magento","Magento 2","Magento 2 Admin Development Series","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","System Configuration"],
        "url": "/2024/07/22/magento-2-system-xml-configuration-a-detailed-guide/",
        "teaser": null
      },{
        "title": "Mastering Magento 2 Registry: The Ultimate Guide to Effective Data Management",
        "excerpt":"In Magento 2, the registry is a crucial part of the framework that allows developers to manage and store data and objects throughout the application’s lifecycle. It provides a way to store and retrieve data that needs to be shared across different parts of the application, especially within the same request.   In this guide, we will explore how the Magento 2 registry works, its use cases, and best practices for utilizing it effectively in your custom development.   What is Magento 2 Registry? The registry in Magento 2 is a mechanism that allows you to store and retrieve data and objects globally within the scope of a single request. It is an implementation of the Registry pattern, which is commonly used in various programming environments.   How to Use Magento 2 Registry:   Accessing the Registry  To access the registry in Magento 2, you typically use the \\Magento\\Framework\\Registry class. This class provides methods to set and get data.   Example of Using Registry           Injecting the Registry: To use the registry in your class, you need to inject it via the constructor. For example, in a block or model:       &lt;?php namespace Vendor\\Module\\Block;  use Magento\\Framework\\Registry;  class CustomBlock extends \\Magento\\Framework\\View\\Element\\Template {     protected $registry;      public function __construct(         \\Magento\\Framework\\View\\Element\\Template\\Context $context,         Registry $registry,         array $data = []     ) {         $this-&gt;registry = $registry;         parent::__construct($context, $data);     }      public function getRegistryData()     {         return $this-&gt;registry-&gt;registry('my_custom_key');     } }                Setting Data in Registry: You can set data in the registry from any part of the code, such as controllers or models:       &lt;?php namespace Vendor\\Module\\Controller\\Index;  use Magento\\Framework\\App\\Action\\Action; use Magento\\Framework\\App\\Action\\Context; use Magento\\Framework\\Registry;  class Index extends Action {     protected $registry;      public function __construct(         Context $context,         Registry $registry     ) {         $this-&gt;registry = $registry;         parent::__construct($context);     }      public function execute()     {         $data = 'This is some data';         $this-&gt;registry-&gt;register('my_custom_key', $data);         // Other logic here...     } }                Retrieving Data from Registry: Retrieve the data that was set in the registry in any part of your application:       &lt;?php namespace Vendor\\Module\\Block;  class CustomBlock extends \\Magento\\Framework\\View\\Element\\Template {     protected $registry;      public function __construct(         \\Magento\\Framework\\View\\Element\\Template\\Context $context,         Registry $registry,         array $data = []     ) {         $this-&gt;registry = $registry;         parent::__construct($context, $data);     }      public function getRegistryData()     {         return $this-&gt;registry-&gt;registry('my_custom_key');     } }           Use Cases for Registry:          Passing Data Between Controllers and Blocks: Use the registry to pass data from controllers to blocks when rendering a page.            Storing Temporary Data: Store temporary data that is needed across multiple methods within the same request.            Sharing Data Across Modules: Share data between different parts of a module or between different modules within the same request scope.       Best Practices:          Avoid Overuse: Do not overuse the registry for storing data. It’s best suited for temporary data that doesn’t need to persist beyond the current request.            Use Unique Keys: Ensure that the keys used in the registry are unique to avoid potential conflicts.            Document Registry Usage: Document any data stored in the registry and its purpose to maintain code clarity and prevent confusion.       Conclusion: The Magento 2 registry is a powerful tool for managing data and objects within the same request. By understanding how to use it effectively, you can streamline your custom development and improve the flexibility of your Magento 2 application. Follow best practices to ensure that your use of the registry remains clean and efficient.  ","categories": ["Magento","Magento 2","Magento 2 Quickies","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","Data management"],
        "url": "/2024/07/23/mastering-magento-2-registry-the-ultimate-guide-to-effective-data-management/",
        "teaser": null
      },{
        "title": "Crafting Custom Admin Routes and Menus in Magento 2: A Complete Guide",
        "excerpt":"Creating custom admin routes and menus in Magento 2 is essential for extending the admin panel with new functionalities. This guide will walk you through the process of setting up custom admin routes, adding menu items, and configuring ACL (Access Control List) to manage permissions effectively.   Why Customize Admin Routes and Menus?     Enhance Functionality: Add new features and tools directly to the Magento admin panel.   Improve Usability: Customize the admin interface to better suit business needs.   Secure Access: Use ACL to ensure that only authorized users can access certain features.   Step-by-Step Guide to Creating Admin Routes and Menus:   Step 1: Define Admin Route (routes.xml)  Create the etc/adminhtml/routes.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:App/etc/routes.xsd\"&gt;     &lt;router id=\"admin\"&gt;         &lt;route id=\"custom_admin\" frontName=\"customadmin\"&gt;             &lt;module name=\"Vendor_Module\" before=\"Magento_Backend\"/&gt;         &lt;/route&gt;     &lt;/router&gt; &lt;/config&gt;   Step 2: Create Admin Controller  Create the Controller/Adminhtml/Index/Index.php file:   &lt;?php namespace Vendor\\Module\\Controller\\Adminhtml\\Index;  use Magento\\Backend\\App\\Action; use Magento\\Backend\\App\\Action\\Context; use Magento\\Framework\\View\\Result\\PageFactory;  class Index extends Action {     protected $resultPageFactory;      public function __construct(Context $context, PageFactory $resultPageFactory)     {         parent::__construct($context);         $this-&gt;resultPageFactory = $resultPageFactory;     }      public function execute()     {         $resultPage = $this-&gt;resultPageFactory-&gt;create();         $resultPage-&gt;getConfig()-&gt;getTitle()-&gt;prepend(__('Custom Admin Page'));         return $resultPage;     } }   Step 3: Add Admin Menu Item (menu.xml)  Create the etc/adminhtml/menu.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Menu/etc/menu.xsd\"&gt;     &lt;menu&gt;         &lt;add id=\"Vendor_Module::main_menu\" title=\"Custom Menu\" module=\"Vendor_Module\" sortOrder=\"100\" parent=\"Magento_Backend::content\"/&gt;         &lt;add id=\"Vendor_Module::submenu\" title=\"Sub Menu\" module=\"Vendor_Module\" sortOrder=\"10\" action=\"customadmin/index/index\" resource=\"Vendor_Module::submenu\" parent=\"Vendor_Module::main_menu\"/&gt;     &lt;/menu&gt; &lt;/config&gt;   Step 4: Define ACL (acl.xml)  Create the etc/acl.xml file to manage permissions:   &lt;?xml version=\"1.0\"?&gt; &lt;acl xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Acl/etc/acl.xsd\"&gt;     &lt;resources&gt;         &lt;resource id=\"Magento_Backend::admin\"&gt;             &lt;resource id=\"Vendor_Module::main_menu\" title=\"Custom Menu\" sortOrder=\"100\" /&gt;             &lt;resource id=\"Vendor_Module::submenu\" title=\"Sub Menu\" sortOrder=\"10\" /&gt;         &lt;/resource&gt;     &lt;/resources&gt; &lt;/acl&gt;   Step 5: Create Layout and View Files  Create the view/adminhtml/layout/customadmin_index_index.xml file for layout configuration:   &lt;?xml version=\"1.0\"?&gt; &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;     &lt;body&gt;         &lt;referenceContainer name=\"content\"&gt;             &lt;block class=\"Vendor\\Module\\Block\\Adminhtml\\Index\" name=\"custom_admin_page\" template=\"Vendor_Module::index.phtml\"/&gt;         &lt;/referenceContainer&gt;     &lt;/body&gt; &lt;/page&gt;   Create the Block/Adminhtml/Index.php file:   &lt;?php namespace Vendor\\Module\\Block\\Adminhtml;  use Magento\\Backend\\Block\\Template;  class Index extends Template {     protected function _prepareLayout()     {         $this-&gt;pageConfig-&gt;getTitle()-&gt;set(__('Custom Admin Page'));         return parent::_prepareLayout();     } }   Create the view/adminhtml/templates/index.phtml file for the template:   &lt;h1&gt;&lt;?= /* @noEscape */ __('Welcome to Custom Admin Page!') ?&gt;&lt;/h1&gt; &lt;p&gt;&lt;?= __('This is a custom admin page created in Magento 2.') ?&gt;&lt;/p&gt;   Step 6: Verify and Test     Clear the cache and log in to the Magento admin panel.   Navigate to Content &gt; Custom Menu &gt; Sub Menu.   You should see the custom admin page with the content defined in index.phtml.   Conclusion: Creating custom admin routes and menus in Magento 2 allows you to extend the functionality of the admin panel, making it more tailored to your specific needs. By following this guide, you can add new features, improve usability, and ensure secure access with ACL configurations.  ","categories": ["Magento","Magento 2","Magento 2 Admin Development Series","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","Admin Routes"],
        "url": "/2024/07/24/crafting-custom-admin-routes-and-menus-in-magento-2-a-complete-guide/",
        "teaser": null
      },{
        "title": "From Scratch to Finish: How to Develop a Magento 2 Theme",
        "excerpt":"Creating a custom theme in Magento 2 allows you to tailor the appearance and layout of your eCommerce store to match your brand identity. This guide will walk you through the process of creating a Magento 2 theme from scratch, including directory structure, essential files, and customization tips.   Why Create a Custom Magento 2 Theme?     Brand Identity: Reflect your brand’s unique look and feel.   User Experience: Improve the user interface and navigation.   Flexibility: Customize layouts and styles to meet specific business needs.   Step-by-Step Guide to Creating a Magento 2 Theme:   Step 1: Set Up the Theme Directory  Create the directory structure for your theme under app/design/frontend:   app/design/frontend/Vendor/theme_name   Step 2: Create Theme Configuration Files          theme.xml: Create the theme.xml file in app/design/frontend/Vendor/theme_name:        &lt;?xml version=\"1.0\"?&gt;  &lt;theme xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Config/etc/theme.xsd\"&gt;      &lt;title&gt;Your Theme Title&lt;/title&gt;      &lt;parent&gt;Magento/blank&lt;/parent&gt;      &lt;media&gt;          &lt;preview_image&gt;media/preview.jpg&lt;/preview_image&gt;      &lt;/media&gt;  &lt;/theme&gt;                registration.php: Create the registration.php file in app/design/frontend/Vendor/theme_name:        &lt;?php  \\Magento\\Framework\\Component\\ComponentRegistrar::register(      \\Magento\\Framework\\Component\\ComponentRegistrar::THEME,      'frontend/Vendor/theme_name',      __DIR__  );                composer.json: Create the composer.json file in app/design/frontend/Vendor/theme_name:        {      \"name\": \"vendor/theme-name\",      \"description\": \"Your theme description\",      \"require\": {          \"php\": \"~7.4.0||~8.0.0\",          \"magento/framework\": \"103.0.*\"      },      \"type\": \"magento2-theme\",      \"version\": \"1.0.0\",      \"license\": [          \"OSL-3.0\",          \"AFL-3.0\"      ],      \"autoload\": {          \"files\": [              \"registration.php\"          ]      }  }           Step 3: Add Static Files and Assets  Create the directories for static files:   app/design/frontend/Vendor/theme_name/web/css app/design/frontend/Vendor/theme_name/web/js app/design/frontend/Vendor/theme_name/web/images   Add Stylesheets          styles.css: Create a custom stylesheet in web/css:        body {      background-color: #f8f8f8;  }                requirejs-config.js: If needed, create the requirejs-config.js file in web:        var config = {      map: {          '*': {              'yourScript': 'Vendor_theme_name/js/your-script'          }      }  };           Step 4: Define Layouts and Templates  Create the directories for layout and template files:   app/design/frontend/Vendor/theme_name/Magento_Theme/layout app/design/frontend/Vendor/theme_name/Magento_Theme/templates   Modify Layouts          default.xml: Create or modify the default.xml layout file in layout:        &lt;?xml version=\"1.0\"?&gt;  &lt;page xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:View/Layout/etc/page_configuration.xsd\"&gt;      &lt;body&gt;          &lt;referenceContainer name=\"header.container\"&gt;              &lt;block class=\"Magento\\Framework\\View\\Element\\Template\" name=\"custom.block\" template=\"Magento_Theme::custom.phtml\" /&gt;          &lt;/referenceContainer&gt;      &lt;/body&gt;  &lt;/page&gt;           Add Templates          custom.phtml: Create a custom template file in templates:        &lt;h1&gt;&lt;?= __('Welcome to Your Custom Theme!') ?&gt;&lt;/h1&gt;  &lt;p&gt;&lt;?= __('This is a custom block added to the header.') ?&gt;&lt;/p&gt;           Step 5: Customize Theme View Files  You can override core view files by copying them from the base theme to your custom theme and modifying them as needed. For example, to customize the footer, copy the footer.phtml file:   app/design/frontend/Vendor/theme_name/Magento_Theme/templates/html/footer.phtml   Make your changes in the copied footer.phtml file to customize the footer layout and content.   Step 6: Activate Your Theme     Enable the theme: Log in to the Magento admin panel and navigate to Content &gt; Design &gt; Configuration.   Edit the configuration for your store view: Set your custom theme as the applied theme.   Flush the cache: Clear the Magento cache to see your changes.   Conclusion: Creating a custom Magento 2 theme allows you to have complete control over the look and feel of your eCommerce store. By following this step-by-step guide, you can set up a new theme, add custom styles and templates, and activate it in your Magento 2 installation. This flexibility enables you to create a unique shopping experience that aligns with your brand and business goals.  ","categories": ["Magento","Magento 2","Magento 2 Theme Development Series","Tutorial"],
        "tags": ["frontend development","magento","magento developer","magento2","php","programming","theme development","tutorial","web development"],
        "url": "/2024/07/24/from-scratch-to-finish-how-to-develop-a-magento-2-theme/",
        "teaser": null
      },{
        "title": "Harnessing the Power of GraphQL in Magento 2: A Developer-Friendly Guide",
        "excerpt":"Magento 2 has embraced GraphQL as a powerful alternative to REST and SOAP APIs. GraphQL offers efficient, flexible, and faster queries, allowing developers to request exactly what they need. This guide will walk you through the essentials of using GraphQL in Magento 2, from setup to basic usage.   Why Use GraphQL in Magento 2?   GraphQL provides several advantages over traditional APIs:     Efficiency: Fetch only the data you need in a single request.   Flexibility: Query multiple resources in a single call.   Performance: Reduce the number of requests and improve load times.   Setting Up GraphQL in Magento 2   Magento 2 comes with GraphQL support out-of-the-box. To enable and test it, follow these steps:           Verify GraphQL Endpoint: The default GraphQL endpoint in Magento 2 is /graphql. You can test this endpoint using tools like GraphiQL or Postman.            Access GraphiQL Interface: Open your browser and navigate to:      http://your-magento-site/graphql           Basic GraphQL Queries in Magento 2   Let’s start with some basic queries to get product information.   Fetching Product Details   Here’s a simple query to fetch product details by SKU:   {   products(filter: { sku: { eq: \"24-MB01\" } }) {     items {       id       name       sku       price {         regularPrice {           amount {             value             currency           }         }       }     }   } }   Advanced GraphQL Queries   GraphQL’s true power lies in its ability to combine multiple queries and handle complex data structures.   Fetching Categories and Products   {   category(id: 2) {     id     name     products {       items {         id         name         sku         price {           regularPrice {             amount {               value               currency             }           }         }       }     }   } }   Mutations in GraphQL   Mutations in GraphQL allow you to modify data on the server. For example, adding a product to the cart:   Adding a Product to the Cart   mutation {   addSimpleProductsToCart(     input: {       cart_id: \"cartId\"       cart_items: [         {           data: {             quantity: 1             sku: \"24-MB01\"           }         }       ]     }   ) {     cart {       items {         id         product {           name           sku           price {             regularPrice {               amount {                 value                 currency               }             }           }         }         quantity       }     }   } }   Conclusion   GraphQL in Magento 2 offers a robust and flexible way to interact with your store’s data. By understanding the basics and leveraging advanced queries and mutations, you can significantly improve the performance and efficiency of your Magento 2 applications.   Next Steps   Once you’ve grasped the basics of GraphQL in Magento 2, it’s time to extend its capabilities. Check out the next part of this series for a detailed guide on extending GraphQL in Magento 2:   ⇒ Extending GraphQL in Magento 2: Custom Queries and Mutations  ","categories": ["Magento","Magento 2","Magento 2 API Development","Magento 2 GraphQL Development","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","GraphQL","API Development"],
        "url": "/2024/07/24/harnessing-the-power-of-graphql-in-magento-2-introduction-and-basics/",
        "teaser": null
      },{
        "title": "Extending GraphQL in Magento 2: Custom Queries and Mutations",
        "excerpt":"Magento 2’s GraphQL API is powerful, but sometimes you need to extend it to meet specific business requirements. This blog will guide you through the process of extending GraphQL in Magento 2 by creating custom queries and mutations.   Extending GraphQL in Magento 2   Magento 2 allows you to extend the GraphQL schema to include custom queries and mutations.   Step 1: Create a Custom Module  Start by creating a new module, for instance, Vendor/Module.   Step 2: Define the Schema and Declare the Resolver  Create the schema.graphqls file in app/code/Vendor/Module/etc.   type Query {   customQuery: String @resolver(class: \"Vendor\\\\Module\\\\Model\\\\Resolver\\\\CustomQuery\") }   Step 3: Implement the Resolver  Create a resolver class in app/code/Vendor/Module/Model/Resolver.   &lt;?php namespace Vendor\\Module\\Model\\Resolver;  use Magento\\Framework\\GraphQl\\Query\\ResolverInterface; use Magento\\Framework\\GraphQl\\Schema\\Type\\ResolveInfo; use Magento\\Framework\\GraphQl\\Config\\Element\\Field;  class CustomQuery implements ResolverInterface {     public function resolve(         Field $field,         $context,         ResolveInfo $info,         array $value = null,         array $args = null     ) {         return 'Hello, this is a custom GraphQL query!';     } }   Conclusion   By following these steps, you can extend the capabilities of Magento 2’s GraphQL API to include custom queries and mutations. This flexibility allows you to tailor the API to meet your specific needs, making your Magento 2 store even more powerful and adaptable.   Next Steps   Ready to create a new GraphQL endpoint in Magento 2? Check out the final part of this series for a step-by-step guide:   ⇒ Creating a New GraphQL Endpoint in Magento 2  ","categories": ["Magento","Magento 2","Magento 2 API Development","Tutorial","Magento 2 GraphQL Development"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","GraphQL","API Development"],
        "url": "/2024/07/24/extending-graphql-in-magento-2-custom-queries-and-mutations/",
        "teaser": null
      },{
        "title": "Creating a New GraphQL Endpoint in Magento 2",
        "excerpt":"Creating a new GraphQL endpoint in Magento 2 allows you to expand the functionality of your API, making it easier to retrieve and manipulate data. This guide will walk you through the process of creating a new GraphQL endpoint from scratch.   Step-by-Step Guide to Creating a New GraphQL Endpoint   Step 1: Create a Custom Module  Create a new module, for instance, Vendor/Module.   Step 2: Define the Schema and Declare the Resolver  Create the schema.graphqls file in app/code/Vendor/Module/etc.   type Mutation {   customMutation(input: CustomInput!): CustomOutput @resolver(class: \"Vendor\\\\Module\\\\Model\\\\Resolver\\\\CustomMutation\") }  input CustomInput {   data: String! }  type CustomOutput {   result: String }   Step 3: Implement the Resolver  Create a resolver class in app/code/Vendor/Module/Model/Resolver.   &lt;?php namespace Vendor\\Module\\Model\\Resolver;  use Magento\\Framework\\GraphQl\\Query\\ResolverInterface; use Magento\\Framework\\GraphQl\\Schema\\Type\\ResolveInfo; use Magento\\Framework\\GraphQl\\Config\\Element\\Field;  class CustomMutation implements ResolverInterface {     public function resolve(         Field $field,         $context,         ResolveInfo $info,         array $value = null,         array $args = null     ) {         return ['result' =&gt; 'Mutation executed successfully with data: ' . $args['input']['data']];     } }   Testing the New Endpoint   Use a tool like GraphiQL or Postman to test your new mutation endpoint. Here’s an example mutation query:   mutation {   customMutation(input: { data: \"test data\" }) {     result   } }   Conclusion   Creating a new GraphQL endpoint in Magento 2 involves defining a schema, implementing resolvers, and declaring them in the dependency injection configuration. By following these steps, you can create powerful new endpoints to extend your Magento 2 store’s functionality.   Related Blogs   For more information on using and extending GraphQL in Magento 2, check out the previous parts of this series:      ⇒ Harnessing the Power of GraphQL in Magento 2: A Developer-Friendly Guide   ⇒ Extending GraphQL in Magento 2: Custom Queries and Mutations  ","categories": ["Magento","Magento 2","Magento 2 API Development","Tutorial","Magento 2 GraphQL Development"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","web development","GraphQL","API Development"],
        "url": "/2024/07/24/creating-a-new-graphql-endpoint-in-magento-2/",
        "teaser": null
      },{
        "title": "Mastering Magento 2's Dependency Injection: A Developer's Guide",
        "excerpt":"Magento 2’s architecture heavily relies on Dependency Injection (DI), a design pattern that allows developers to achieve loose coupling and better manage dependencies within their applications. Understanding and extending Magento 2’s DI framework is crucial for any developer aiming to create robust and maintainable customizations.   What is Dependency Injection?   Dependency Injection is a design pattern used to implement IoC (Inversion of Control), allowing a class to declare its dependencies without creating them. This is achieved by injecting these dependencies, typically through constructors, setters, or interface injection.   Why Use Dependency Injection in Magento 2?      Loose Coupling: DI promotes loose coupling by separating the creation of a dependency from its behavior.   Flexibility: It allows for easy swapping of implementations, which is beneficial for testing and maintenance.   Scalability: Simplifies the management of complex dependencies in large applications.   Understanding Magento 2’s DI Configuration   Magento 2 uses XML files to configure DI. These configurations are defined in di.xml files located in various module directories. The main configuration file can be found in:   app/code/Vendor/Module/etc/di.xml   Defining Dependencies in di.xml   Dependencies can be defined in the di.xml file using &lt;type&gt;, &lt;virtualType&gt;, &lt;preference&gt;, and &lt;plugin&gt; tags.   Example 1: Type Configuration   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;type name=\"Vendor\\Module\\Model\\Example\"&gt;         &lt;arguments&gt;             &lt;argument name=\"dependency\" xsi:type=\"object\"&gt;Vendor\\Module\\Model\\Dependency&lt;/argument&gt;         &lt;/arguments&gt;     &lt;/type&gt; &lt;/config&gt;   In this example, the Vendor\\Module\\Model\\Example class declares a dependency on Vendor\\Module\\Model\\Dependency.   Example 2: Preference Configuration   Preferences allow you to specify an implementation for an interface or a class.   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;preference for=\"Vendor\\Module\\Api\\Data\\ExampleInterface\" type=\"Vendor\\Module\\Model\\Example\"/&gt; &lt;/config&gt;   This configuration tells Magento to use Vendor\\Module\\Model\\Example whenever Vendor\\Module\\Api\\Data\\ExampleInterface is requested.   Extending Dependency Injection   To extend the DI configuration, you might want to add plugins, interceptors, or modify existing services.   Example 3: Adding a Plugin   Plugins (also known as interceptors) allow you to modify the behavior of public methods in classes.   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;type name=\"Magento\\Catalog\\Api\\ProductRepositoryInterface\"&gt;         &lt;plugin name=\"example_plugin\" type=\"Vendor\\Module\\Plugin\\ProductRepositoryPlugin\"/&gt;     &lt;/type&gt; &lt;/config&gt;   The Vendor\\Module\\Plugin\\ProductRepositoryPlugin class can now intercept method calls on Magento\\Catalog\\Api\\ProductRepositoryInterface.   Example Plugin Class   &lt;?php namespace Vendor\\Module\\Plugin;  class ProductRepositoryPlugin {     public function beforeGetById(         \\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject,         $productId     ) {         // Code to execute before the getById method     }      public function afterGetById(         \\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject,         $result     ) {         // Code to execute after the getById method         return $result;     }      public function aroundGetById(         \\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject,         callable $proceed,         $productId     ) {         // Code to execute around the getById method         $result = $proceed($productId);         return $result;     } }   Conclusion   Mastering Dependency Injection in Magento 2 is essential for developing scalable, maintainable, and flexible customizations. By understanding how to configure DI through di.xml and leveraging the power of plugins and preferences, you can significantly enhance the capabilities of your Magento 2 store.  ","categories": ["Magento","Magento 2","Magento 2 Module Development Series","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","Dependency Injection","Custom Development"],
        "url": "/2024/07/25/mastering-magento-2s-dependency-injection-a-developers-guide/",
        "teaser": null
      },{
        "title": "Overriding in Magento 2: Mastering Preferences, Plugins, and Event-Observers",
        "excerpt":"Magento 2 offers multiple ways to override and customize its core functionality, including preferences, plugins, and event-observers. Each method has its use cases, advantages, and best practices. This guide will explore these techniques in detail, helping you choose the best approach for your customization needs.   Overriding with Preferences   Preferences allow you to specify which class should be used whenever a particular class or interface is requested.   How to Use Preferences   Define a preference in your module’s di.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;preference for=\"Magento\\Catalog\\Model\\Product\" type=\"Vendor\\Module\\Model\\CustomProduct\"/&gt; &lt;/config&gt;   Example: Custom Product Class   &lt;?php namespace Vendor\\Module\\Model;  class CustomProduct extends \\Magento\\Catalog\\Model\\Product {     public function getName()     {         return 'Custom ' . parent::getName();     } }   Advantages of Preferences:      Direct Replacement: Easy to replace core classes with custom ones.   Simplicity: Straightforward and easy to implement.   Disadvantages of Preferences:      Global Impact: Replaces the class globally, affecting all instances.   Maintenance: Can be difficult to manage in large projects with many preferences.   Overriding with Plugins   Plugins (also known as interceptors) allow you to modify the behavior of public methods without directly changing the core code.   Types of Plugins      Before Plugins: Execute code before a method.   After Plugins: Execute code after a method.   Around Plugins: Wrap the method call with custom logic.   How to Use Plugins   Define a plugin in your module’s di.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;type name=\"Magento\\Catalog\\Api\\ProductRepositoryInterface\"&gt;         &lt;plugin name=\"custom_product_plugin\" type=\"Vendor\\Module\\Plugin\\ProductPlugin\"/&gt;     &lt;/type&gt; &lt;/config&gt;   Example: Product Plugin Class   &lt;?php namespace Vendor\\Module\\Plugin;  class ProductPlugin {     public function beforeGetById(\\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject, $productId)     {         // Code to execute before getById method     }      public function afterGetById(\\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject, $result)     {         // Code to execute after getById method         return $result;     }      public function aroundGetById(\\Magento\\Catalog\\Api\\ProductRepositoryInterface $subject, callable $proceed, $productId)     {         // Code to execute around getById method         $result = $proceed($productId);         return $result;     } }   Advantages of Plugins:      Granular Control: Modify specific methods without affecting the entire class.   Flexible: Combine multiple plugins on the same method.   Disadvantages of Plugins:      Complexity: Can become complex with many plugins on the same method.   Performance: Overuse can impact performance due to additional method calls.   Overriding with Event-Observers   Event-Observers allow you to respond to specific events triggered throughout the Magento application.   How to Use Event-Observers   Define an event observer in your module’s events.xml file:   &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Event/etc/events.xsd\"&gt;     &lt;event name=\"catalog_product_save_after\"&gt;         &lt;observer name=\"custom_product_save_observer\" instance=\"Vendor\\Module\\Observer\\ProductSaveAfter\"/&gt;     &lt;/event&gt; &lt;/config&gt;   Example: Product Save Observer Class   &lt;?php namespace Vendor\\Module\\Observer;  use Magento\\Framework\\Event\\Observer; use Magento\\Framework\\Event\\ObserverInterface;  class ProductSaveAfter implements ObserverInterface {     public function execute(Observer $observer)     {         $product = $observer-&gt;getEvent()-&gt;getProduct();         // Custom logic for product save     } }   Advantages of Event-Observers:      Event-Driven: Respond to specific events without altering the core code.   Modularity: Decoupled logic from core functionality.   Disadvantages of Event-Observers:      Visibility: Less visible than direct method overrides.   Debugging: Can be harder to debug due to event-driven nature.   Read More Details Here: Event and Observer in Magento 2: A Comprehensive Guide   Best Practices      Use Dependency Injection: Prefer dependency injection over direct ObjectManager usage.   Limit Preferences: Use preferences sparingly to avoid global replacements.   Combine Plugins: Use a combination of plugins and event-observers for granular control.   Test Extensively: Ensure thorough testing to avoid conflicts and performance issues.   Conclusion   Magento 2 provides multiple methods for overriding core functionality, each with its own strengths and use cases. By understanding and leveraging preferences, plugins, and event-observers, you can create powerful and maintainable customizations for your Magento 2 store.  ","categories": ["Magento","Magento 2","Magento 2 Module Development Series","Tutorial"],
        "tags": ["frontend development","magento","magento developer","magento2","php","programming","theme development","tutorial","web development"],
        "url": "/2024/07/26/overriding-in-magento-2-mastering-preferences-plugins-and-event-observers/",
        "teaser": null
      },{
        "title": "Building Custom APIs in Magento 2: A Step-by-Step Guide",
        "excerpt":"Magento 2’s robust API framework allows developers to create custom APIs, enabling seamless integration with external systems and enhancing the functionality of Magento stores. This guide will walk you through the process of building custom APIs in Magento 2, covering essential components, configuration, and practical examples.   Why Custom APIs?   Custom APIs in Magento 2 allow you to:     Extend Functionality: Add new features to your Magento store.   Integrate Systems: Connect with third-party services and applications.   Improve Automation: Automate processes and data exchanges.   Prerequisites   Before you begin, ensure you have:     A Magento 2 installation.   Basic knowledge of PHP and Magento 2 module development.   Step 1: Create a New Module   First, create a new module for your custom API.      Define Module Structure:     app/code/Vendor/Module/ ├── registration.php ├── etc/module.xml           registration.php:     &lt;?php \\Magento\\Framework\\Component\\ComponentRegistrar::register(     \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,     'Vendor_Module',     __DIR__ );           module.xml:     &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;     &lt;module name=\"Vendor_Module\" setup_version=\"1.0.0\"/&gt; &lt;/config&gt;           Step 2: Define API Endpoint   Define the API endpoint in webapi.xml.   Understanding webapi.xml Elements      &lt;route&gt;: Defines the URL pattern and HTTP method for the API.            url: The URL path for accessing the API.       method: The HTTP method (GET, POST, PUT, DELETE) to be used.           &lt;service&gt;: Maps the route to a specific PHP class and method.            class: The fully qualified name of the class handling the request.       method: The method within the class to be called.           &lt;resources&gt;: Specifies the access control for the API.            &lt;resource ref&gt;: Defines which user roles can access the API.              webapi.xml:     &lt;?xml version=\"1.0\"?&gt; &lt;routes xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module:Magento_Webapi/etc/webapi.xsd\"&gt;     &lt;route url=\"/V1/customapi/:id\" method=\"GET\"&gt;         &lt;service class=\"Vendor\\Module\\Api\\CustomApiInterface\" method=\"getById\"/&gt;         &lt;resources&gt;             &lt;resource ref=\"anonymous\"/&gt;         &lt;/resources&gt;     &lt;/route&gt; &lt;/routes&gt;           Step 3: Create API Interface and Implementation   Create the interface and model for your custom API.      Api/CustomApiInterface.php:     &lt;?php namespace Vendor\\Module\\Api;  interface CustomApiInterface {     /**      * Get entity by ID.      *      * @param int $id      * @return \\Vendor\\Module\\Api\\Data\\CustomEntityInterface      */     public function getById($id); }           Model/CustomApi.php:     &lt;?php namespace Vendor\\Module\\Model;  use Vendor\\Module\\Api\\CustomApiInterface; use Vendor\\Module\\Api\\Data\\CustomEntityInterface;  class CustomApi implements CustomApiInterface {     protected $customEntityFactory;      public function __construct(\\Vendor\\Module\\Model\\CustomEntityFactory $customEntityFactory)     {         $this-&gt;customEntityFactory = $customEntityFactory;     }      public function getById($id)     {         $entity = $this-&gt;customEntityFactory-&gt;create()-&gt;load($id);         if (!$entity-&gt;getId()) {             throw new \\Magento\\Framework\\Exception\\NoSuchEntityException(__('Entity with id \"%1\" does not exist.', $id));         }         return $entity;     } }           Step 4: Define Data Interface   Create a data interface and model to structure the data returned by your API.      Api/Data/CustomEntityInterface.php:     &lt;?php namespace Vendor\\Module\\Api\\Data;  interface CustomEntityInterface {     /**      * Get ID      *      * @return int      */     public function getId();      /**      * Get Name      *      * @return string      */     public function getName(); }           Model/CustomEntity.php:     &lt;?php namespace Vendor\\Module\\Model;  use Magento\\Framework\\Model\\AbstractModel; use Vendor\\Module\\Api\\Data\\CustomEntityInterface;  class CustomEntity extends AbstractModel implements CustomEntityInterface {     protected function _construct()     {         $this-&gt;_init('Vendor\\Module\\Model\\ResourceModel\\CustomEntity');     }      public function getId()     {         return $this-&gt;getData('entity_id');     }      public function getName()     {         return $this-&gt;getData('name');     } }           Step 5: Testing Your Custom API   With your custom API implemented, you can now test it using tools like Postman or cURL.   Example cURL Command:  curl -X GET \"http://your-magento-site.com/rest/V1/customapi/1\" -H \"accept: application/json\"   Conclusion   By following these steps, you can create custom APIs in Magento 2, enabling powerful integrations and extending the functionality of your Magento store. Whether you’re building new features or integrating third-party services, custom APIs offer a flexible and efficient way to enhance your Magento 2 capabilities.  ","categories": ["Magento","Magento 2","Magento 2 API Development","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","Custom API","Custom Development"],
        "url": "/2024/07/30/building-custom-apis-in-magento-2-a-step-by-step-guide/",
        "teaser": null
      },{
        "title": "Leveraging the Magento 2 Command Line Interface (CLI) for Efficient Development",
        "excerpt":"The Magento 2 Command Line Interface (CLI) is a powerful tool that can significantly enhance your development workflow. This guide explores the capabilities of the Magento 2 CLI, including essential commands, automation techniques, and how to extend the CLI with custom commands.   Why Use the Magento 2 CLI?   Using the Magento 2 CLI offers several benefits:     Efficiency: Automate repetitive tasks and streamline development processes.   Control: Execute complex commands and manage your store with precision.   Flexibility: Extend the CLI with custom commands tailored to your needs.   Essential Magento 2 CLI Commands   Here are some essential Magento 2 CLI commands every developer should know:      Setup Upgrade:     bin/magento setup:upgrade          This command applies database updates and installs new modules.       Compile Code:     bin/magento setup:di:compile          Compiles dependency injection and other generated code.       Static Content Deployment:     bin/magento setup:static-content:deploy          Deploys static content like JavaScript, CSS, and images.       Cache Management:     bin/magento cache:clean bin/magento cache:flush          Cleans and flushes the cache to ensure changes are applied.       Reindex:     bin/magento indexer:reindex          Reindexes data to improve performance and ensure data consistency.       Automating Tasks with the CLI   The CLI can be used to automate routine tasks, saving time and reducing errors.   Example: Automating Deployment   Create a deployment script to automate the steps involved in deploying changes:   deploy.sh:  #!/bin/bash  # Put Magento in maintenance mode bin/magento maintenance:enable  # Upgrade database and compile code bin/magento setup:upgrade bin/magento setup:di:compile  # Deploy static content and clean cache bin/magento setup:static-content:deploy -f bin/magento cache:clean bin/magento cache:flush  # Disable maintenance mode bin/magento maintenance:disable  echo \"Deployment completed successfully!\"   Make the script executable:  chmod +x deploy.sh   Run the   script:  ./deploy.sh   Extending the Magento 2 CLI   You can extend the Magento 2 CLI with custom commands to meet your specific needs.   Example: Creating a Custom Command           Define the Command: Create a new file CustomCommand.php in your module’s Console/Command directory.       &lt;?php namespace Vendor\\Module\\Console\\Command;  use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Output\\OutputInterface;  class CustomCommand extends Command {     protected function configure()     {         $this-&gt;setName('vendor:custom:command')             -&gt;setDescription('Custom command description');         parent::configure();     }      protected function execute(InputInterface $input, OutputInterface $output)     {         $output-&gt;writeln('Hello, this is a custom command!');         return 0;     } }                Register the Command: Create a di.xml file in your module’s etc directory.       &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:ObjectManager/etc/config.xsd\"&gt;     &lt;type name=\"Magento\\Framework\\Console\\CommandList\"&gt;         &lt;arguments&gt;             &lt;argument name=\"commands\" xsi:type=\"array\"&gt;                 &lt;item name=\"vendor:custom:command\" xsi:type=\"object\"&gt;Vendor\\Module\\Console\\Command\\CustomCommand&lt;/item&gt;             &lt;/argument&gt;         &lt;/arguments&gt;     &lt;/type&gt; &lt;/config&gt;           Conclusion   The Magento 2 CLI is an indispensable tool for developers, offering powerful capabilities to automate tasks, manage the store, and extend functionality with custom commands. By mastering the CLI, you can significantly improve your development efficiency and control over your Magento store.  ","categories": ["Magento","Magento 2","Magento 2 Module Development Series","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","CLI","Development","Automation","Custom Development"],
        "url": "/2024/07/30/leveraging-the-magento-2-command-line-interface-for-efficient-development/",
        "teaser": null
      },{
        "title": "Optimizing Magento 2 for SEO: Best Practices and Tips",
        "excerpt":"Search Engine Optimization (SEO) is crucial for any e-commerce store, and Magento 2 provides powerful tools to help you enhance your website’s visibility. In this blog, we’ll explore the best practices and tips for optimizing your Magento 2 store for SEO, ensuring you achieve higher rankings and drive more organic traffic.   Why SEO Matters for Magento 2   SEO is vital for:     Increased Visibility: Higher search engine rankings lead to more visibility and traffic.   Better User Experience: Well-optimized sites offer a better user experience.   Higher Conversion Rates: SEO helps attract targeted traffic, increasing the likelihood of conversions.   Best Practices for Magento 2 SEO   1. Optimize URLs   Ensure your URLs are clean, descriptive, and keyword-rich.     Use SEO-friendly URLs: Navigate to Stores &gt; Configuration &gt; General &gt; Web &gt; URL Options and enable Use Web Server Rewrites.   Avoid duplicate content: Use canonical tags to specify the preferred version of a webpage.   2. Improve Page Titles and Meta Descriptions   Page titles and meta descriptions are critical for search engine rankings.     Unique Titles: Ensure each page has a unique, descriptive title.   Keyword-rich Descriptions: Write compelling meta descriptions that include relevant keywords.   3. Use Heading Tags Properly   Proper use of heading tags (H1, H2, H3) helps search engines understand the structure of your content.     H1 Tags: Each page should have a single H1 tag that includes the primary keyword.   Subheadings: Use H2 and H3 tags to organize content and include secondary keywords.   4. Optimize Product and Category Pages   Product and category pages are crucial for e-commerce SEO.     Product Titles: Use clear, descriptive product titles with relevant keywords.   Unique Descriptions: Write unique product descriptions to avoid duplicate content issues.   Rich Snippets: Implement schema markup to enhance search engine listings with rich snippets.   5. Enhance Site Speed   Site speed is a significant ranking factor.     Optimize Images: Compress images to reduce load times.   Use Caching: Enable full-page caching to improve performance.   Minify CSS and JavaScript: Minify CSS and JavaScript files to reduce their size.   6. Mobile Optimization   With the increasing number of mobile users, mobile optimization is crucial.     Responsive Design: Ensure your Magento 2 store is mobile-friendly.   AMP: Implement Accelerated Mobile Pages (AMP) for faster loading on mobile devices.   7. Leverage Magento 2 SEO Extensions   Several Magento 2 SEO extensions can help enhance your store’s SEO.     SEO Suite Ultimate: An all-in-one solution for comprehensive SEO management.   Google Rich Snippets: Helps implement structured data for rich snippets.   Actionable Tips for Magento 2 SEO   1. Create an XML Sitemap   An XML sitemap helps search engines crawl your site more effectively.     Generate Sitemap: Navigate to Stores &gt; Configuration &gt; Catalog &gt; XML Sitemap and configure the settings.   Submit to Google: Submit your sitemap to Google Search Console.   2. Enable Breadcrumbs   Breadcrumbs improve site navigation and help search engines understand your site structure.     Enable Breadcrumbs: Go to Stores &gt; Configuration &gt; Catalog &gt; Catalog &gt; Breadcrumbs and enable the setting.   3. Implement 301 Redirects   Use 301 redirects to guide users and search engines from old URLs to new ones.     Redirects: Navigate to Marketing &gt; URL Rewrites to set up redirects.   4. Regularly Update Content   Regular content updates signal search engines that your site is active and relevant.     Blog: Maintain a blog with regular posts on relevant topics.   Product Updates: Regularly update product descriptions and add new products.   Conclusion   Optimizing your Magento 2 store for SEO is essential for achieving higher search engine rankings and driving organic traffic. By following these best practices and tips, you can enhance your store’s visibility, improve user experience, and boost conversion rates.   Feel free to contact me if you have any issues or need further assistance.  ","categories": ["Magento","Magento 2","SEO","Tutorial"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","Magento 2","SEO","Optimization"],
        "url": "/2024/07/31/optimizing-magento-2-for-seo-best-practices-and-tips/",
        "teaser": null
      },{
        "title": "Developing Custom Magento 2 Widgets: A Complete Guide",
        "excerpt":"Widgets in Magento 2 provide a flexible way to add dynamic content to pages and layout updates. Creating custom widgets allows you to extend Magento’s functionality and tailor it to your specific needs. In this guide, we’ll walk you through the process of developing custom widgets in Magento 2, from setting up your module to deploying and managing your widget.   1. Introduction to Magento 2 Widgets   Widgets in Magento 2 are powerful tools that allow you to insert dynamic content into CMS pages and static blocks. They are essentially small blocks of code that can be easily placed and configured within Magento’s content management system.   2. Setting Up Your Module   Before you create a custom widget, you need to set up a new Magento 2 module. Follow these steps:   a. Create Module Directory Structure      Create the necessary directories under app/code/YourVendor/YourModule:            etc       view/frontend/ui_component       view/frontend/templates       registration.php       composer.json                Define the module in registration.php:       &lt;?php \\Magento\\Framework\\Component\\ComponentRegistrar::register(     \\Magento\\Framework\\Component\\ComponentRegistrar::MODULE,     'YourVendor_YourModule',     __DIR__ );                Create module.xml in the etc directory:       &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Module/etc/module.xsd\"&gt;     &lt;module name=\"YourVendor_YourModule\" setup_version=\"1.0.0\"/&gt; &lt;/config&gt;           3. Creating Widget Types   Widgets are defined in XML configuration files and involve several key components:   a. Define Widget Configuration           Create widget.xml in the etc directory:       &lt;?xml version=\"1.0\"?&gt; &lt;config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:framework:Widget/etc/widget.xsd\"&gt;     &lt;widgets&gt;         &lt;widget id=\"custom_widget\" class=\"YourVendor\\YourModule\\Block\\Widget\\CustomWidget\" is_enabled=\"true\"&gt;             &lt;name&gt;Custom Widget&lt;/name&gt;             &lt;description&gt;A custom widget for Magento 2&lt;/description&gt;             &lt;parameters&gt;                 &lt;parameter name=\"title\" xsi:type=\"text\" required=\"true\"&gt;                     &lt;label&gt;Title&lt;/label&gt;                 &lt;/parameter&gt;                 &lt;!-- Add more parameters as needed --&gt;             &lt;/parameters&gt;         &lt;/widget&gt;     &lt;/widgets&gt; &lt;/config&gt;                Create the Widget Block Class in Block/Widget/CustomWidget.php:       &lt;?php namespace YourVendor\\YourModule\\Block\\Widget;  use Magento\\Framework\\View\\Element\\Template; use Magento\\Widget\\Block\\BlockInterface;  class CustomWidget extends Template implements BlockInterface {     public function _construct()     {         parent::_construct();         $this-&gt;setTemplate('YourVendor_YourModule::widget.phtml');     }      // Add custom methods and logic here }           4. Developing Widget Templates   Widgets use PHTML templates for rendering:           Create widget.phtml in view/frontend/templates:       &lt;div class=\"custom-widget\"&gt;     &lt;h2&gt;&lt;?php echo $this-&gt;escapeHtml($block-&gt;getData('title')); ?&gt;&lt;/h2&gt;     &lt;!-- Add more HTML and PHP as needed --&gt; &lt;/div&gt;           5. Adding Widget Configuration Options   To make your widget configurable:      Define additional parameters in the widget.xml file.   Add form fields to allow users to set values in the Magento admin panel.   6. Widget Logic and Data Handling   Handle data and logic within your widget block class. Use Magento’s data models and collections to interact with the database.   7. Testing and Debugging      Test your widget by adding it to a CMS page or static block.   Check for errors in the Magento logs and debug any issues using standard PHP debugging tools.   8. Deploying and Managing Widgets           Deploy your module by running Magento’s deployment commands:       bin/magento setup:upgrade bin/magento setup:di:compile bin/magento setup:static-content:deploy                Manage your widgets via the Magento admin panel and handle any updates as needed.       By following this guide, you can create powerful and flexible custom widgets for your Magento 2 store, enhancing its functionality and improving user experience.  ","categories": ["Magento","Magento 2","Magento 2 - Tips and Quickies","Development"],
        "tags": ["magento development","magento","magento developer","magento2","php","programming","tutorial","Magento 2","Widgets","Custom Development"],
        "url": "/2024/07/31/developing-custom-magento-2-widgets-a-complete-guide/",
        "teaser": null
      },{
        "title": "How to Optimize Magento 2 Performance with Redis Caching",
        "excerpt":"In the world of eCommerce, speed and scalability are critical for providing an optimal user experience. Magento 2, a robust platform for online stores, offers various tools and technologies to enhance performance. One of the most powerful tools in this arsenal is Redis.   In this blog, we’ll dive into what Redis is, how it works, and how you can use it to supercharge your Magento 2 store.   What is Redis?   Redis (Remote Dictionary Server) is an open-source, in-memory data structure store that can be used as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, and more. Redis is known for its speed and efficiency, making it an ideal choice for caching and real-time analytics.   Key Features of Redis:      In-memory storage: Redis stores data in memory, leading to extremely fast read and write operations.   Data Persistence: Redis provides options for persisting data to disk, ensuring data durability.   Scalability: Redis can handle millions of requests per second, making it highly scalable for large applications.   Flexibility: Supports multiple data structures, providing flexibility in how data is managed.   How Redis Works   Redis operates primarily in memory, making it incredibly fast compared to traditional databases. Here’s a simplified view of how it works:      Data Storage: Data is stored in memory as key-value pairs. For example, you can store session data, configuration settings, or full web pages.   Persistence: Although Redis is an in-memory store, it supports persistence by writing data to disk. This ensures that data isn’t lost in case of a server restart.   Replication: Redis supports master-slave replication, allowing you to create multiple replicas of your data for high availability and load balancing.   Pub/Sub Messaging: Redis can also be used as a message broker with its publish/subscribe messaging system, which is useful for real-time communication between different parts of your application.   Using Redis with Magento 2   Integrating Redis with Magento 2 can significantly improve the performance of your online store. Here’s how Redis can be used in Magento 2:           Caching: Redis can be used as a cache backend for Magento 2. By caching frequently accessed data like product information, categories, and configuration settings, Redis reduces the load on your database and speeds up page load times.            Session Storage: Redis can also be used to store session data. This is particularly useful for large stores with high traffic, as Redis can handle a large number of simultaneous sessions efficiently.            Full Page Cache (FPC): Magento 2 supports Redis for full-page caching, which can drastically reduce server response times and improve the overall user experience.       Configuration Steps:   To use Redis with Magento 2, you’ll need to modify your env.php configuration file. Here’s a basic setup:   'cache' =&gt; [     'frontend' =&gt; [         'default' =&gt; [             'backend' =&gt; 'Cm_Cache_Backend_Redis',             'backend_options' =&gt; [                 'server' =&gt; '127.0.0.1',                 'port' =&gt; '6379',                 'persistent' =&gt; '',                 'database' =&gt; '0',                 'password' =&gt; '',                 'force_standalone' =&gt; '0',                 'connect_retries' =&gt; '1',                 'read_timeout' =&gt; '10',                 'automatic_cleaning_factor' =&gt; '0',                 'compress_data' =&gt; '1',                 'compress_tags' =&gt; '1',                 'compress_threshold' =&gt; '20480',                 'compression_lib' =&gt; 'gzip',             ],         ],     ], ], 'session' =&gt; [     'save' =&gt; 'redis',     'redis' =&gt; [         'host' =&gt; '127.0.0.1',         'port' =&gt; '6379',         'password' =&gt; '',         'timeout' =&gt; '2.5',         'persistent_identifier' =&gt; '',         'database' =&gt; '2',         'compression_threshold' =&gt; '2048',         'compression_library' =&gt; 'gzip',         'log_level' =&gt; '1',         'max_concurrency' =&gt; '6',         'break_after_frontend' =&gt; '5',         'break_after_adminhtml' =&gt; '30',         'first_lifetime' =&gt; '600',         'bot_first_lifetime' =&gt; '60',         'bot_lifetime' =&gt; '7200',         'disable_locking' =&gt; '0',         'min_lifetime' =&gt; '60',         'max_lifetime' =&gt; '2592000'     ] ]   This configuration sets Redis as the cache backend and session storage for your Magento 2 store.   Verifying Redis Configuration in Magento 2   After configuring Redis with Magento 2, it’s essential to verify that everything is working correctly. Here’s how you can do that:   1. Check Redis Connection   You can use the redis-cli command to ensure that Redis is running and accepting connections:   redis-cli ping   If Redis is working correctly, it should return PONG.   2. Verify Magento 2 Cache Backend   To verify that Magento 2 is using Redis as the cache backend, you can use the Magento CLI:   php bin/magento cache:status   This command will display the status of the cache types. If Redis is configured correctly, the cache types should be active and managed by Redis.   3. Monitor Redis Activity   Redis provides built-in monitoring tools to check the current activity. You can monitor the real-time activity of Redis using:   redis-cli monitor   This will show you the commands that Redis is currently processing. If Magento 2 is actively using Redis, you should see entries related to cache reads and writes.   4. Inspect Redis Data   To inspect the keys stored in Redis by Magento 2, you can use:   redis-cli keys '*'   This command will display all the keys currently stored in Redis. Magento 2-related keys usually have prefixes like mage-cache or sess.   5. Clear Magento Cache and Recheck   Finally, clear Magento’s cache and then monitor Redis to see if new cache entries are created:   php bin/magento cache:clean   After clearing the cache, run redis-cli monitor again to see Redis activity as Magento repopulates the cache.   If all these checks confirm Redis is being utilized, your Magento 2 setup is successfully using Redis.   Installing Redis on Ubuntu   To get started with Redis on your Ubuntu server, you’ll need to install it first. For a detailed guide on how to install Redis on Ubuntu, please refer to this blog post.   Conclusion   Redis is a powerful tool that can significantly enhance the performance and scalability of your Magento 2 store. By leveraging Redis for caching, session storage, and full-page caching, you can provide a faster and more reliable experience for your customers.   Stay tuned for the next part of this series, where we’ll cover the detailed steps on how to install Redis on an Ubuntu server.     Looking for more Magento 2 tips? Check out our other Magento Development Guide.  ","categories": ["Magento","Magento 2","Performance","Tutorial","Caching"],
        "tags": ["backend development","coding","hosting","Redis","Caching","Performance","programming","server","troubleshooting"],
        "url": "/2024/08/31/redis-and-magento-2-enhancing-performance-and-scalability/",
        "teaser": null
      },{
        "title": "Installing Redis on Ubuntu: A Step-by-Step Guide",
        "excerpt":"Redis is a powerful in-memory data structure store that can be used as a cache, database, and message broker. In this guide, we will walk you through the steps to install Redis on an Ubuntu server. Whether you’re setting up Redis for the first time or need a refresher, this tutorial will help you get Redis up and running quickly.   Prerequisites   Before you begin, ensure that you have:      A server running Ubuntu 20.04 or later   A user with sudo privileges   Step 1: Update Your Package Index   First, update your package index to ensure you have the latest information about available packages:   sudo apt-get update   Step 2: Install Redis   Install Redis by running the following command:   sudo apt-get install redis-server   This command will install Redis along with any necessary dependencies.   Step 3: Configure Redis   Once Redis is installed, you’ll want to make some basic configuration changes to optimize its performance. The Redis configuration file is located at /etc/redis/redis.conf.   Enable Persistence   To ensure data persistence, you can configure Redis to save snapshots of your data to disk periodically. To do this, open the configuration file:   sudo nano /etc/redis/redis.conf   Find the following lines and adjust them as needed:   save 900 1 save 300 10 save 60 10000   These lines specify the frequency of saving data to disk.   Set Maximum Memory Usage   If you’re using Redis primarily as a cache, you may want to set a maximum memory limit. To do this, locate the maxmemory directive in the configuration file and set it to a suitable value:   maxmemory 256mb maxmemory-policy allkeys-lru   This configuration tells Redis to use up to 256MB of memory and to evict the least recently used keys when the limit is reached.   Save and close the file when you’re done.   Step 4: Start and Enable Redis   Start the Redis service and enable it to start on boot:   sudo systemctl start redis sudo systemctl enable redis   Step 5: Verify Redis Installation   To verify that Redis is working correctly, use the redis-cli command to ping the server:   redis-cli ping   If everything is working, Redis will respond with PONG.   You can also check the status of the Redis service:   sudo systemctl status redis   This command will display the current status of the Redis service.   Conclusion   You have successfully installed and configured Redis on your Ubuntu server. Redis is now ready to be used for caching, session management, or any other purpose you need. Be sure to tune the configuration settings according to your specific use case to get the best performance.   For more tips on using Redis with Magento 2, check out our other blog on Redis and Magento 2.  ","categories": ["Ubuntu","Server Setup","Tutorial","Caching"],
        "tags": ["backend development","server","Redis","Ubuntu","Caching","installation","troubleshooting"],
        "url": "/2024/08/31/installing-redis-on-ubuntu/",
        "teaser": null
      }]
